
g474_uavcan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c20  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08005df8  08005df8  00006df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e2c  08005e2c  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005e2c  08005e2c  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005e2c  08005e2c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e2c  08005e2c  00006e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e30  08005e30  00006e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005e34  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  2000000c  08005e40  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08005e40  000075d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012172  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b7  00000000  00000000  000191ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0001ba68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d93  00000000  00000000  0001cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026911  00000000  00000000  0001d9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bd1  00000000  00000000  000442b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcabb  00000000  00000000  00055e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152940  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b74  00000000  00000000  00152984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001574f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005de0 	.word	0x08005de0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005de0 	.word	0x08005de0

08000218 <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
//    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
//    {
		count++;
 8000222:	4b19      	ldr	r3, [pc, #100]	@ (8000288 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	3301      	adds	r3, #1
 8000228:	b2da      	uxtb	r2, r3
 800022a:	4b17      	ldr	r3, [pc, #92]	@ (8000288 <HAL_FDCAN_RxFifo0Callback+0x70>)
 800022c:	701a      	strb	r2, [r3, #0]
    HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data);
 800022e:	4b17      	ldr	r3, [pc, #92]	@ (800028c <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000230:	4a17      	ldr	r2, [pc, #92]	@ (8000290 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000232:	2140      	movs	r1, #64	@ 0x40
 8000234:	4817      	ldr	r0, [pc, #92]	@ (8000294 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8000236:	f001 f945 	bl	80014c4 <HAL_FDCAN_GetRxMessage>


//    canardHandleRxFrame(&canard, &rx_frame, HAL_GetTick() * 1000);

    rx_frame.id = rx_header.Identifier| CANARD_CAN_FRAME_EFF;
 800023a:	4b15      	ldr	r3, [pc, #84]	@ (8000290 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000242:	4a15      	ldr	r2, [pc, #84]	@ (8000298 <HAL_FDCAN_RxFifo0Callback+0x80>)
 8000244:	6013      	str	r3, [r2, #0]
    rx_frame.data_len = rx_header.DataLength;
 8000246:	4b12      	ldr	r3, [pc, #72]	@ (8000290 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	b2da      	uxtb	r2, r3
 800024c:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <HAL_FDCAN_RxFifo0Callback+0x80>)
 800024e:	731a      	strb	r2, [r3, #12]
    memcpy(rx_frame.data, rx_data, rx_frame.data_len);
 8000250:	4b11      	ldr	r3, [pc, #68]	@ (8000298 <HAL_FDCAN_RxFifo0Callback+0x80>)
 8000252:	7b1b      	ldrb	r3, [r3, #12]
 8000254:	461a      	mov	r2, r3
 8000256:	490d      	ldr	r1, [pc, #52]	@ (800028c <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000258:	4810      	ldr	r0, [pc, #64]	@ (800029c <HAL_FDCAN_RxFifo0Callback+0x84>)
 800025a:	f005 fdb3 	bl	8005dc4 <memcpy>

    canardHandleRxFrame(&canard, &rx_frame, HAL_GetTick() * 1000);
 800025e:	f000 fdd3 	bl	8000e08 <HAL_GetTick>
 8000262:	4603      	mov	r3, r0
 8000264:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000268:	fb02 f303 	mul.w	r3, r2, r3
 800026c:	2200      	movs	r2, #0
 800026e:	461c      	mov	r4, r3
 8000270:	4615      	mov	r5, r2
 8000272:	4622      	mov	r2, r4
 8000274:	462b      	mov	r3, r5
 8000276:	4908      	ldr	r1, [pc, #32]	@ (8000298 <HAL_FDCAN_RxFifo0Callback+0x80>)
 8000278:	4809      	ldr	r0, [pc, #36]	@ (80002a0 <HAL_FDCAN_RxFifo0Callback+0x88>)
 800027a:	f004 fa01 	bl	8004680 <canardHandleRxFrame>
//    }
}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bdb0      	pop	{r4, r5, r7, pc}
 8000286:	bf00      	nop
 8000288:	200005ac 	.word	0x200005ac
 800028c:	200005a4 	.word	0x200005a4
 8000290:	2000057c 	.word	0x2000057c
 8000294:	20000028 	.word	0x20000028
 8000298:	200005b0 	.word	0x200005b0
 800029c:	200005b4 	.word	0x200005b4
 80002a0:	20000524 	.word	0x20000524

080002a4 <my_strnlen>:
//        HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_data);
//
//        // Optional: blink LED or set a flag
//    }
//}
static size_t my_strnlen(const char *s, size_t maxlen) {
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; i < maxlen && s[i]; i++);
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	e002      	b.n	80002ba <my_strnlen+0x16>
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	3301      	adds	r3, #1
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fa      	ldr	r2, [r7, #12]
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d205      	bcs.n	80002ce <my_strnlen+0x2a>
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1f2      	bne.n	80002b4 <my_strnlen+0x10>
    return i;
 80002ce:	68fb      	ldr	r3, [r7, #12]
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	0000      	movs	r0, r0
	...

080002e0 <handle_GetNodeInfo>:

static void handle_GetNodeInfo(CanardInstance *ins, CanardRxTransfer *transfer)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	f5ad 7d4c 	sub.w	sp, sp, #816	@ 0x330
 80002e6:	af06      	add	r7, sp, #24
 80002e8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80002ec:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80002f0:	6018      	str	r0, [r3, #0]
 80002f2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80002f6:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80002fa:	6019      	str	r1, [r3, #0]
    uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];
    struct uavcan_protocol_GetNodeInfoResponse pkt;

    memset(&pkt, 0, sizeof(pkt));
 80002fc:	f107 0308 	add.w	r3, r7, #8
 8000300:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f005 fd30 	bl	8005d6c <memset>
    pkt.status = node_status;
 800030c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8000310:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8000314:	4a44      	ldr	r2, [pc, #272]	@ (8000428 <handle_GetNodeInfo+0x148>)
 8000316:	ca07      	ldmia	r2, {r0, r1, r2}
 8000318:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    pkt.software_version.major = 1;
 800031c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8000320:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8000324:	2201      	movs	r2, #1
 8000326:	741a      	strb	r2, [r3, #16]
    pkt.software_version.minor = 0;
 8000328:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800032c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8000330:	2200      	movs	r2, #0
 8000332:	745a      	strb	r2, [r3, #17]

    pkt.hardware_version.major = 1;
 8000334:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8000338:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800033c:	2201      	movs	r2, #1
 800033e:	f883 2020 	strb.w	r2, [r3, #32]
    pkt.hardware_version.minor = 0;
 8000342:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8000346:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800034a:	2200      	movs	r2, #0
 800034c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    for (int i = 0; i < 16; i++) pkt.hardware_version.unique_id[i] = i;
 8000350:	2300      	movs	r3, #0
 8000352:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8000356:	e011      	b.n	800037c <handle_GetNodeInfo+0x9c>
 8000358:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 800035c:	b2d9      	uxtb	r1, r3
 800035e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8000362:	f5a3 7244 	sub.w	r2, r3, #784	@ 0x310
 8000366:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 800036a:	4413      	add	r3, r2
 800036c:	3322      	adds	r3, #34	@ 0x22
 800036e:	460a      	mov	r2, r1
 8000370:	701a      	strb	r2, [r3, #0]
 8000372:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8000376:	3301      	adds	r3, #1
 8000378:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 800037c:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8000380:	2b0f      	cmp	r3, #15
 8000382:	dde9      	ble.n	8000358 <handle_GetNodeInfo+0x78>

    const char *name = "kuybat";
 8000384:	4b29      	ldr	r3, [pc, #164]	@ (800042c <handle_GetNodeInfo+0x14c>)
 8000386:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
    pkt.name.len = (uint8_t)my_strnlen(name, 80);
 800038a:	2150      	movs	r1, #80	@ 0x50
 800038c:	f8d7 0310 	ldr.w	r0, [r7, #784]	@ 0x310
 8000390:	f7ff ff88 	bl	80002a4 <my_strnlen>
 8000394:	4603      	mov	r3, r0
 8000396:	b2da      	uxtb	r2, r3
 8000398:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800039c:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80003a0:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    memcpy(pkt.name.data, name, pkt.name.len);
 80003a4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80003a8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80003ac:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80003b0:	461a      	mov	r2, r3
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	f203 1333 	addw	r3, r3, #307	@ 0x133
 80003ba:	f8d7 1310 	ldr.w	r1, [r7, #784]	@ 0x310
 80003be:	4618      	mov	r0, r3
 80003c0:	f005 fd00 	bl	8005dc4 <memcpy>

    static uint8_t getnodeinfo_transfer_id = 0;
    uint16_t total_size = uavcan_protocol_GetNodeInfoResponse_encode(&pkt, buffer
 80003c4:	f507 72ca 	add.w	r2, r7, #404	@ 0x194
 80003c8:	f107 0308 	add.w	r3, r7, #8
 80003cc:	4611      	mov	r1, r2
 80003ce:	4618      	mov	r0, r3
 80003d0:	f003 fec3 	bl	800415a <uavcan_protocol_GetNodeInfoResponse_encode>
 80003d4:	4603      	mov	r3, r0
 80003d6:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e
    #if CANARD_ENABLE_TAO_OPTION
        , true
    #endif
    );

    canardRequestOrRespond(ins,
 80003da:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80003de:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	7ed9      	ldrb	r1, [r3, #27]
 80003e6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80003ea:	f5a3 7045 	sub.w	r0, r3, #788	@ 0x314
 80003ee:	f8b7 330e 	ldrh.w	r3, [r7, #782]	@ 0x30e
 80003f2:	9305      	str	r3, [sp, #20]
 80003f4:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80003f8:	9304      	str	r3, [sp, #16]
 80003fa:	2300      	movs	r3, #0
 80003fc:	9303      	str	r3, [sp, #12]
 80003fe:	2318      	movs	r3, #24
 8000400:	9302      	str	r3, [sp, #8]
 8000402:	4b0b      	ldr	r3, [pc, #44]	@ (8000430 <handle_GetNodeInfo+0x150>)
 8000404:	9301      	str	r3, [sp, #4]
 8000406:	2301      	movs	r3, #1
 8000408:	9300      	str	r3, [sp, #0]
 800040a:	a305      	add	r3, pc, #20	@ (adr r3, 8000420 <handle_GetNodeInfo+0x140>)
 800040c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000410:	6800      	ldr	r0, [r0, #0]
 8000412:	f004 f885 	bl	8004520 <canardRequestOrRespond>
                           &getnodeinfo_transfer_id,
                           CANARD_TRANSFER_PRIORITY_LOW,
                           CanardResponse,
                           buffer,
                           total_size);
}
 8000416:	bf00      	nop
 8000418:	f507 7746 	add.w	r7, r7, #792	@ 0x318
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	21c46a9e 	.word	0x21c46a9e
 8000424:	ee468a81 	.word	0xee468a81
 8000428:	200005c0 	.word	0x200005c0
 800042c:	08005df8 	.word	0x08005df8
 8000430:	200005d0 	.word	0x200005d0
 8000434:	00000000 	.word	0x00000000

08000438 <should_accept>:

bool should_accept(const CanardInstance* ins, uint64_t* out_signature, uint16_t data_type_id,
                   CanardTransferType transfer_type, uint8_t source_node_id)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	4611      	mov	r1, r2
 8000444:	461a      	mov	r2, r3
 8000446:	460b      	mov	r3, r1
 8000448:	80fb      	strh	r3, [r7, #6]
 800044a:	4613      	mov	r3, r2
 800044c:	717b      	strb	r3, [r7, #5]
    if (transfer_type == CanardTransferTypeRequest && data_type_id == 1)
 800044e:	797b      	ldrb	r3, [r7, #5]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d10a      	bne.n	800046a <should_accept+0x32>
 8000454:	88fb      	ldrh	r3, [r7, #6]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d107      	bne.n	800046a <should_accept+0x32>
    {
        *out_signature = UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_SIGNATURE;
 800045a:	68b9      	ldr	r1, [r7, #8]
 800045c:	a306      	add	r3, pc, #24	@ (adr r3, 8000478 <should_accept+0x40>)
 800045e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000462:	e9c1 2300 	strd	r2, r3, [r1]
        return true;
 8000466:	2301      	movs	r3, #1
 8000468:	e000      	b.n	800046c <should_accept+0x34>
    }
    return false;
 800046a:	2300      	movs	r3, #0
}
 800046c:	4618      	mov	r0, r3
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	21c46a9e 	.word	0x21c46a9e
 800047c:	ee468a81 	.word	0xee468a81

08000480 <onTransferReceived>:
void onTransferReceived(CanardInstance *ins, CanardRxTransfer *transfer)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
    if (transfer->transfer_type == CanardTransferTypeRequest) {
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	7e1b      	ldrb	r3, [r3, #24]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d10e      	bne.n	80004b0 <onTransferReceived+0x30>
        switch (transfer->data_type_id) {
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	8adb      	ldrh	r3, [r3, #22]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d10a      	bne.n	80004b0 <onTransferReceived+0x30>
            case 1: // GetNodeInfo
								count1++;
 800049a:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <onTransferReceived+0x38>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	3301      	adds	r3, #1
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	4b05      	ldr	r3, [pc, #20]	@ (80004b8 <onTransferReceived+0x38>)
 80004a4:	701a      	strb	r2, [r3, #0]
                handle_GetNodeInfo(ins, transfer);
 80004a6:	6839      	ldr	r1, [r7, #0]
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff ff19 	bl	80002e0 <handle_GetNodeInfo>
                break;
 80004ae:	bf00      	nop
            //
        }
    }
    //
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	200005ad 	.word	0x200005ad
 80004bc:	00000000 	.word	0x00000000

080004c0 <send_BatteryInfo>:

static void send_BatteryInfo(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b0a8      	sub	sp, #160	@ 0xa0
 80004c4:	af06      	add	r7, sp, #24
    struct uavcan_equipment_power_BatteryInfo batt_info;
    memset(&batt_info, 0, sizeof(batt_info));
 80004c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004ca:	2248      	movs	r2, #72	@ 0x48
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f005 fc4c 	bl	8005d6c <memset>


    batt_info.temperature = 383.5f;      // d? K
 80004d4:	4b28      	ldr	r3, [pc, #160]	@ (8000578 <send_BatteryInfo+0xb8>)
 80004d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    batt_info.voltage = 25.2f;          // V
 80004d8:	4b28      	ldr	r3, [pc, #160]	@ (800057c <send_BatteryInfo+0xbc>)
 80004da:	643b      	str	r3, [r7, #64]	@ 0x40
    batt_info.current = 2.1f;          // A
 80004dc:	4b28      	ldr	r3, [pc, #160]	@ (8000580 <send_BatteryInfo+0xc0>)
 80004de:	647b      	str	r3, [r7, #68]	@ 0x44
    batt_info.average_power_10sec = 200.0f; // W
 80004e0:	4b28      	ldr	r3, [pc, #160]	@ (8000584 <send_BatteryInfo+0xc4>)
 80004e2:	64bb      	str	r3, [r7, #72]	@ 0x48
    batt_info.remaining_capacity_wh = 40.0f;
 80004e4:	4b28      	ldr	r3, [pc, #160]	@ (8000588 <send_BatteryInfo+0xc8>)
 80004e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    batt_info.full_charge_capacity_wh = 50.0f;
 80004e8:	4b28      	ldr	r3, [pc, #160]	@ (800058c <send_BatteryInfo+0xcc>)
 80004ea:	653b      	str	r3, [r7, #80]	@ 0x50
    batt_info.hours_to_full_charge = 0.5f;
 80004ec:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80004f0:	657b      	str	r3, [r7, #84]	@ 0x54
    batt_info.status_flags = UAVCAN_EQUIPMENT_POWER_BATTERYINFO_STATUS_FLAG_IN_USE;
 80004f2:	2301      	movs	r3, #1
 80004f4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
    batt_info.state_of_health_pct = 98;
 80004f8:	2362      	movs	r3, #98	@ 0x62
 80004fa:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
    batt_info.state_of_charge_pct = 80;
 80004fe:	2350      	movs	r3, #80	@ 0x50
 8000500:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    batt_info.state_of_charge_pct_stdev = 1;
 8000504:	2301      	movs	r3, #1
 8000506:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    batt_info.battery_id = 1;
 800050a:	2301      	movs	r3, #1
 800050c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    batt_info.model_instance_id = 0x12345678;
 8000510:	4b1f      	ldr	r3, [pc, #124]	@ (8000590 <send_BatteryInfo+0xd0>)
 8000512:	663b      	str	r3, [r7, #96]	@ 0x60

    batt_info.model_name.len = 8;
 8000514:	2308      	movs	r3, #8
 8000516:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    memcpy(batt_info.model_name.data, "LiPo4s", 8);
 800051a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800051e:	3329      	adds	r3, #41	@ 0x29
 8000520:	2208      	movs	r2, #8
 8000522:	491c      	ldr	r1, [pc, #112]	@ (8000594 <send_BatteryInfo+0xd4>)
 8000524:	4618      	mov	r0, r3
 8000526:	f005 fc4d 	bl	8005dc4 <memcpy>

    // 2. Encode
    uint8_t buffer[UAVCAN_EQUIPMENT_POWER_BATTERYINFO_MAX_SIZE];
    uint32_t len = uavcan_equipment_power_BatteryInfo_encode(&batt_info, buffer
 800052a:	1d3a      	adds	r2, r7, #4
 800052c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000530:	4611      	mov	r1, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f003 fc8d 	bl	8003e52 <uavcan_equipment_power_BatteryInfo_encode>
 8000538:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    #endif
    );

    // 3. Truy?n lên DroneCAN b?ng canardBroadcast
    static uint8_t transfer_id = 0;
    canardBroadcast(&canard,
 800053c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000540:	b29b      	uxth	r3, r3
 8000542:	9304      	str	r3, [sp, #16]
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	9303      	str	r3, [sp, #12]
 8000548:	2318      	movs	r3, #24
 800054a:	9302      	str	r3, [sp, #8]
 800054c:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <send_BatteryInfo+0xd8>)
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	f240 4344 	movw	r3, #1092	@ 0x444
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	a306      	add	r3, pc, #24	@ (adr r3, 8000570 <send_BatteryInfo+0xb0>)
 8000558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800055c:	480f      	ldr	r0, [pc, #60]	@ (800059c <send_BatteryInfo+0xdc>)
 800055e:	f003 fed8 	bl	8004312 <canardBroadcast>
                    UAVCAN_EQUIPMENT_POWER_BATTERYINFO_ID,
                    &transfer_id,
                    CANARD_TRANSFER_PRIORITY_LOW,
                    buffer,
                    len);
}
 8000562:	bf00      	nop
 8000564:	3788      	adds	r7, #136	@ 0x88
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	f3af 8000 	nop.w
 8000570:	8a711966 	.word	0x8a711966
 8000574:	249c2654 	.word	0x249c2654
 8000578:	43bfc000 	.word	0x43bfc000
 800057c:	41c9999a 	.word	0x41c9999a
 8000580:	40066666 	.word	0x40066666
 8000584:	43480000 	.word	0x43480000
 8000588:	42200000 	.word	0x42200000
 800058c:	42480000 	.word	0x42480000
 8000590:	12345678 	.word	0x12345678
 8000594:	08005e00 	.word	0x08005e00
 8000598:	200005d1 	.word	0x200005d1
 800059c:	20000524 	.word	0x20000524

080005a0 <send_NodeStatus>:
//                    (uint16_t)len);
//}


static void send_NodeStatus(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	@ 0x28
 80005a4:	af06      	add	r7, sp, #24
    uint8_t buffer[UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE];

    node_status.uptime_sec = HAL_GetTick() / 1000;
 80005a6:	f000 fc2f 	bl	8000e08 <HAL_GetTick>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000618 <send_NodeStatus+0x78>)
 80005ae:	fba2 2303 	umull	r2, r3, r2, r3
 80005b2:	099b      	lsrs	r3, r3, #6
 80005b4:	4a19      	ldr	r2, [pc, #100]	@ (800061c <send_NodeStatus+0x7c>)
 80005b6:	6013      	str	r3, [r2, #0]
    node_status.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 80005b8:	4b18      	ldr	r3, [pc, #96]	@ (800061c <send_NodeStatus+0x7c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	711a      	strb	r2, [r3, #4]
    node_status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 80005be:	4b17      	ldr	r3, [pc, #92]	@ (800061c <send_NodeStatus+0x7c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	715a      	strb	r2, [r3, #5]
    node_status.sub_mode = 0;
 80005c4:	4b15      	ldr	r3, [pc, #84]	@ (800061c <send_NodeStatus+0x7c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	719a      	strb	r2, [r3, #6]
    node_status.vendor_specific_status_code = 1234;
 80005ca:	4b14      	ldr	r3, [pc, #80]	@ (800061c <send_NodeStatus+0x7c>)
 80005cc:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 80005d0:	811a      	strh	r2, [r3, #8]

    uint32_t len = uavcan_protocol_NodeStatus_encode(&node_status, buffer
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4811      	ldr	r0, [pc, #68]	@ (800061c <send_NodeStatus+0x7c>)
 80005d8:	f003 fe27 	bl	800422a <uavcan_protocol_NodeStatus_encode>
 80005dc:	60f8      	str	r0, [r7, #12]
#endif
    );

    static uint8_t transfer_id = 0;

    canardBroadcast(&canard,
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	9304      	str	r3, [sp, #16]
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	9303      	str	r3, [sp, #12]
 80005e8:	2318      	movs	r3, #24
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <send_NodeStatus+0x80>)
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	f240 1355 	movw	r3, #341	@ 0x155
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	a306      	add	r3, pc, #24	@ (adr r3, 8000610 <send_NodeStatus+0x70>)
 80005f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005fc:	4809      	ldr	r0, [pc, #36]	@ (8000624 <send_NodeStatus+0x84>)
 80005fe:	f003 fe88 	bl	8004312 <canardBroadcast>
                    UAVCAN_PROTOCOL_NODESTATUS_ID,
                    &transfer_id,
                    CANARD_TRANSFER_PRIORITY_LOW,
                    buffer,
                    len);
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	f3af 8000 	nop.w
 8000610:	c1a7c6f1 	.word	0xc1a7c6f1
 8000614:	0f0868d0 	.word	0x0f0868d0
 8000618:	10624dd3 	.word	0x10624dd3
 800061c:	200005c0 	.word	0x200005c0
 8000620:	200005d2 	.word	0x200005d2
 8000624:	20000524 	.word	0x20000524

08000628 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //10hz
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0b      	ldr	r2, [pc, #44]	@ (8000664 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d105      	bne.n	8000646 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800063a:	2101      	movs	r1, #1
 800063c:	480a      	ldr	r0, [pc, #40]	@ (8000668 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800063e:	f001 fd35 	bl	80020ac <HAL_GPIO_TogglePin>
		send_BatteryInfo();
 8000642:	f7ff ff3d 	bl	80004c0 <send_BatteryInfo>
	}
	if(htim->Instance == TIM2) //1hz
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800064e:	d105      	bne.n	800065c <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000650:	2102      	movs	r1, #2
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000654:	f001 fd2a 	bl	80020ac <HAL_GPIO_TogglePin>
			send_NodeStatus();
 8000658:	f7ff ffa2 	bl	80005a0 <send_NodeStatus>
	}
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40000400 	.word	0x40000400
 8000668:	48000400 	.word	0x48000400

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b08e      	sub	sp, #56	@ 0x38
 8000670:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 fb64 	bl	8000d3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f8c5 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f9f3 	bl	8000a64 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800067e:	f000 f90d 	bl	800089c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000682:	f000 f951 	bl	8000928 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000686:	f000 f99d 	bl	80009c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_FDCAN_Start(&hfdcan1);
 800068a:	4854      	ldr	r0, [pc, #336]	@ (80007dc <main+0x170>)
 800068c:	f000 feae 	bl	80013ec <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	4851      	ldr	r0, [pc, #324]	@ (80007dc <main+0x170>)
 8000696:	f001 f81d 	bl	80016d4 <HAL_FDCAN_ActivateNotification>
	canardInit(&canard, canard_pool, CANARD_POOL_SIZE, onTransferReceived, should_accept, NULL);
 800069a:	2300      	movs	r3, #0
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	4b50      	ldr	r3, [pc, #320]	@ (80007e0 <main+0x174>)
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	4b50      	ldr	r3, [pc, #320]	@ (80007e4 <main+0x178>)
 80006a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006a8:	494f      	ldr	r1, [pc, #316]	@ (80007e8 <main+0x17c>)
 80006aa:	4850      	ldr	r0, [pc, #320]	@ (80007ec <main+0x180>)
 80006ac:	f003 fdd7 	bl	800425e <canardInit>
	canardSetLocalNodeID(&canard, 11);
 80006b0:	210b      	movs	r1, #11
 80006b2:	484e      	ldr	r0, [pc, #312]	@ (80007ec <main+0x180>)
 80006b4:	f003 fe07 	bl	80042c6 <canardSetLocalNodeID>
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;            // 29-bit ID
 80006b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006bc:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;                       // Use filter slot 0 (0–127 for FDCAN1)
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;        // Use mask-based filtering
 80006c2:	2302      	movs	r3, #2
 80006c4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;// Send matching messages to RX FIFO 0
 80006c6:	2301      	movs	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 =  0x00000000;                // ID to match
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 =  0x00000000;                // Full mask to match all 29 bits
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 80006d2:	463b      	mov	r3, r7
 80006d4:	4619      	mov	r1, r3
 80006d6:	4841      	ldr	r0, [pc, #260]	@ (80007dc <main+0x170>)
 80006d8:	f000 fe2e 	bl	8001338 <HAL_FDCAN_ConfigFilter>
	HAL_TIM_Base_Start_IT(&htim3);
 80006dc:	4844      	ldr	r0, [pc, #272]	@ (80007f0 <main+0x184>)
 80006de:	f002 fd4f 	bl	8003180 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80006e2:	4844      	ldr	r0, [pc, #272]	@ (80007f4 <main+0x188>)
 80006e4:	f002 fd4c 	bl	8003180 <HAL_TIM_Base_Start_IT>
	uint32_t last_node_status = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t last_battinfo = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t node_status_period = 1000; // ms
 80006f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f4:	623b      	str	r3, [r7, #32]
	uint32_t battinfo_period = 100;
 80006f6:	2364      	movs	r3, #100	@ 0x64
 80006f8:	61fb      	str	r3, [r7, #28]
	bool sent_any = false;
 80006fa:	2300      	movs	r3, #0
 80006fc:	76fb      	strb	r3, [r7, #27]
//	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData);

//		while (canard.tx_queue = !NULL)
//		{

				frame = canardPeekTxQueue(&canard);
 80006fe:	483b      	ldr	r0, [pc, #236]	@ (80007ec <main+0x180>)
 8000700:	f003 ff96 	bl	8004630 <canardPeekTxQueue>
 8000704:	4603      	mov	r3, r0
 8000706:	4a3c      	ldr	r2, [pc, #240]	@ (80007f8 <main+0x18c>)
 8000708:	6013      	str	r3, [r2, #0]
				if (frame)
 800070a:	4b3b      	ldr	r3, [pc, #236]	@ (80007f8 <main+0x18c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d050      	beq.n	80007b4 <main+0x148>
				{
//						HAL_Delay(1);
						memset(&txHeader, 0, sizeof(txHeader));
 8000712:	2224      	movs	r2, #36	@ 0x24
 8000714:	2100      	movs	r1, #0
 8000716:	4839      	ldr	r0, [pc, #228]	@ (80007fc <main+0x190>)
 8000718:	f005 fb28 	bl	8005d6c <memset>
						memset(txData, 0, sizeof(txData));
 800071c:	2208      	movs	r2, #8
 800071e:	2100      	movs	r1, #0
 8000720:	4837      	ldr	r0, [pc, #220]	@ (8000800 <main+0x194>)
 8000722:	f005 fb23 	bl	8005d6c <memset>
//						HAL_Delay(1);
						if (frame->id & CANARD_CAN_FRAME_EFF) {
 8000726:	4b34      	ldr	r3, [pc, #208]	@ (80007f8 <main+0x18c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	da0b      	bge.n	8000748 <main+0xdc>
								txHeader.Identifier = frame->id & CANARD_CAN_EXT_ID_MASK;
 8000730:	4b31      	ldr	r3, [pc, #196]	@ (80007f8 <main+0x18c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800073a:	4a30      	ldr	r2, [pc, #192]	@ (80007fc <main+0x190>)
 800073c:	6013      	str	r3, [r2, #0]
								txHeader.IdType = FDCAN_EXTENDED_ID;
 800073e:	4b2f      	ldr	r3, [pc, #188]	@ (80007fc <main+0x190>)
 8000740:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	e007      	b.n	8000758 <main+0xec>

						} else {
								txHeader.Identifier = frame->id;
 8000748:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <main+0x18c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a2b      	ldr	r2, [pc, #172]	@ (80007fc <main+0x190>)
 8000750:	6013      	str	r3, [r2, #0]
								txHeader.IdType = FDCAN_STANDARD_ID;
 8000752:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <main+0x190>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
						}
//						txHeader.RTR = CAN_RTR_DATA;
						txHeader.DataLength = frame->data_len;
 8000758:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <main+0x18c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	7b1b      	ldrb	r3, [r3, #12]
 800075e:	461a      	mov	r2, r3
 8000760:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <main+0x190>)
 8000762:	60da      	str	r2, [r3, #12]

//						txHeader.TransmitGlobalTime = DISABLE;
//						HAL_Delay(1);
						for (uint8_t i = 0; i < 8; i++) {
 8000764:	2300      	movs	r3, #0
 8000766:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800076a:	e017      	b.n	800079c <main+0x130>
								txData[i] = (i < frame->data_len) ? frame->data[i] : 0;
 800076c:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <main+0x18c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	7b1b      	ldrb	r3, [r3, #12]
 8000772:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000776:	429a      	cmp	r2, r3
 8000778:	d206      	bcs.n	8000788 <main+0x11c>
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <main+0x18c>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000782:	4413      	add	r3, r2
 8000784:	791a      	ldrb	r2, [r3, #4]
 8000786:	e000      	b.n	800078a <main+0x11e>
 8000788:	2200      	movs	r2, #0
 800078a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800078e:	491c      	ldr	r1, [pc, #112]	@ (8000800 <main+0x194>)
 8000790:	54ca      	strb	r2, [r1, r3]
						for (uint8_t i = 0; i < 8; i++) {
 8000792:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000796:	3301      	adds	r3, #1
 8000798:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800079c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007a0:	2b07      	cmp	r3, #7
 80007a2:	d9e3      	bls.n	800076c <main+0x100>
////						        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
////						        HAL_Delay(1000);
//						    }
//						}
//						HAL_Delay(1);
						HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData);
 80007a4:	4a16      	ldr	r2, [pc, #88]	@ (8000800 <main+0x194>)
 80007a6:	4915      	ldr	r1, [pc, #84]	@ (80007fc <main+0x190>)
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <main+0x170>)
 80007aa:	f000 fe47 	bl	800143c <HAL_FDCAN_AddMessageToTxFifoQ>
//				}
				canardPopTxQueue(&canard);
 80007ae:	480f      	ldr	r0, [pc, #60]	@ (80007ec <main+0x180>)
 80007b0:	f003 ff51 	bl	8004656 <canardPopTxQueue>
		}
//		HAL_Delay(1);
		// Clean stale transfers (gi?ng process1HzTasks trong battery_node)
		canardCleanupStaleTransfers(&canard, HAL_GetTick() * 1000);
 80007b4:	f000 fb28 	bl	8000e08 <HAL_GetTick>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	2200      	movs	r2, #0
 80007c4:	461c      	mov	r4, r3
 80007c6:	4615      	mov	r5, r2
 80007c8:	4622      	mov	r2, r4
 80007ca:	462b      	mov	r3, r5
 80007cc:	4807      	ldr	r0, [pc, #28]	@ (80007ec <main+0x180>)
 80007ce:	f004 faf5 	bl	8004dbc <canardCleanupStaleTransfers>

		HAL_Delay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f000 fb24 	bl	8000e20 <HAL_Delay>
				frame = canardPeekTxQueue(&canard);
 80007d8:	e791      	b.n	80006fe <main+0x92>
 80007da:	bf00      	nop
 80007dc:	20000028 	.word	0x20000028
 80007e0:	08000439 	.word	0x08000439
 80007e4:	08000481 	.word	0x08000481
 80007e8:	20000124 	.word	0x20000124
 80007ec:	20000524 	.word	0x20000524
 80007f0:	200000d8 	.word	0x200000d8
 80007f4:	2000008c 	.word	0x2000008c
 80007f8:	200005cc 	.word	0x200005cc
 80007fc:	20000550 	.word	0x20000550
 8000800:	20000574 	.word	0x20000574

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	@ 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2238      	movs	r2, #56	@ 0x38
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f005 faaa 	bl	8005d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000826:	2000      	movs	r0, #0
 8000828:	f001 fc5a 	bl	80020e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082c:	2302      	movs	r3, #2
 800082e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000836:	2340      	movs	r3, #64	@ 0x40
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083e:	2302      	movs	r3, #2
 8000840:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000842:	2304      	movs	r3, #4
 8000844:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000846:	2355      	movs	r3, #85	@ 0x55
 8000848:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fcf4 	bl	8002248 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000866:	f000 f915 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2303      	movs	r3, #3
 8000870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2104      	movs	r1, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fff2 	bl	800286c <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800088e:	f000 f901 	bl	8000a94 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	@ 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008a2:	4a20      	ldr	r2, [pc, #128]	@ (8000924 <MX_FDCAN1_Init+0x88>)
 80008a4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80008a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008be:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008cc:	220a      	movs	r2, #10
 80008ce:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008d0:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008d8:	220e      	movs	r2, #14
 80008da:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80008dc:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008de:	2202      	movs	r2, #2
 80008e0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 8000902:	2200      	movs	r2, #0
 8000904:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 8000908:	2200      	movs	r2, #0
 800090a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_FDCAN1_Init+0x84>)
 800090e:	f000 fbb9 	bl	8001084 <HAL_FDCAN_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000918:	f000 f8bc 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000028 	.word	0x20000028
 8000924:	40006400 	.word	0x40006400

08000928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000946:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800094c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 800094e:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000950:	22aa      	movs	r2, #170	@ 0xaa
 8000952:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 800095a:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <MX_TIM2_Init+0x94>)
 800095c:	4a18      	ldr	r2, [pc, #96]	@ (80009c0 <MX_TIM2_Init+0x98>)
 800095e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800096c:	4813      	ldr	r0, [pc, #76]	@ (80009bc <MX_TIM2_Init+0x94>)
 800096e:	f002 fbaf 	bl	80030d0 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000978:	f000 f88c 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000980:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4619      	mov	r1, r3
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <MX_TIM2_Init+0x94>)
 800098a:	f002 fdc1 	bl	8003510 <HAL_TIM_ConfigClockSource>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000994:	f000 f87e 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_TIM2_Init+0x94>)
 80009a6:	f003 f841 	bl	8003a2c <HAL_TIMEx_MasterConfigSynchronization>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009b0:	f000 f870 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000008c 	.word	0x2000008c
 80009c0:	000f4240 	.word	0x000f4240

080009c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <MX_TIM3_Init+0x98>)
 80009e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a60 <MX_TIM3_Init+0x9c>)
 80009e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1700;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <MX_TIM3_Init+0x98>)
 80009ea:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80009ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <MX_TIM3_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <MX_TIM3_Init+0x98>)
 80009f8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80009fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <MX_TIM3_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <MX_TIM3_Init+0x98>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a0a:	4814      	ldr	r0, [pc, #80]	@ (8000a5c <MX_TIM3_Init+0x98>)
 8000a0c:	f002 fb60 	bl	80030d0 <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000a16:	f000 f83d 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <MX_TIM3_Init+0x98>)
 8000a28:	f002 fd72 	bl	8003510 <HAL_TIM_ConfigClockSource>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000a32:	f000 f82f 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <MX_TIM3_Init+0x98>)
 8000a44:	f002 fff2 	bl	8003a2c <HAL_TIMEx_MasterConfigSynchronization>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000a4e:	f000 f821 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3720      	adds	r7, #32
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000d8 	.word	0x200000d8
 8000a60:	40000400 	.word	0x40000400

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_GPIO_Init+0x2c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4a08      	ldr	r2, [pc, #32]	@ (8000a90 <MX_GPIO_Init+0x2c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_GPIO_Init+0x2c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ad6:	f001 fba7 	bl	8002228 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09e      	sub	sp, #120	@ 0x78
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	2254      	movs	r2, #84	@ 0x54
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 f92f 	bl	8005d6c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a24      	ldr	r2, [pc, #144]	@ (8000ba4 <HAL_FDCAN_MspInit+0xbc>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d141      	bne.n	8000b9c <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000b1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b22:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 f883 	bl	8002c34 <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000b34:	f7ff ffae 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <HAL_FDCAN_MspInit+0xc0>)
 8000b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba8 <HAL_FDCAN_MspInit+0xc0>)
 8000b3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <HAL_FDCAN_MspInit+0xc0>)
 8000b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <HAL_FDCAN_MspInit+0xc0>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <HAL_FDCAN_MspInit+0xc0>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <HAL_FDCAN_MspInit+0xc0>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b68:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b6c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b7a:	2309      	movs	r3, #9
 8000b7c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b88:	f001 f90e 	bl	8001da8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2015      	movs	r0, #21
 8000b92:	f000 fa42 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000b96:	2015      	movs	r0, #21
 8000b98:	f000 fa59 	bl	800104e <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3778      	adds	r7, #120	@ 0x78
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40006400 	.word	0x40006400
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bbc:	d114      	bne.n	8000be8 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bbe:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <HAL_TIM_Base_MspInit+0x78>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc2:	4a18      	ldr	r2, [pc, #96]	@ (8000c24 <HAL_TIM_Base_MspInit+0x78>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bca:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <HAL_TIM_Base_MspInit+0x78>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	201c      	movs	r0, #28
 8000bdc:	f000 fa1d 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000be0:	201c      	movs	r0, #28
 8000be2:	f000 fa34 	bl	800104e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000be6:	e018      	b.n	8000c1a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <HAL_TIM_Base_MspInit+0x7c>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d113      	bne.n	8000c1a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <HAL_TIM_Base_MspInit+0x78>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <HAL_TIM_Base_MspInit+0x78>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <HAL_TIM_Base_MspInit+0x78>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	201d      	movs	r0, #29
 8000c10:	f000 fa03 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c14:	201d      	movs	r0, #29
 8000c16:	f000 fa1a 	bl	800104e <HAL_NVIC_EnableIRQ>
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40000400 	.word	0x40000400

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <NMI_Handler+0x4>

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <MemManage_Handler+0x4>

08000c44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c82:	f000 f8af 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c90:	4802      	ldr	r0, [pc, #8]	@ (8000c9c <FDCAN1_IT0_IRQHandler+0x10>)
 8000c92:	f000 fe05 	bl	80018a0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000028 	.word	0x20000028

08000ca0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ca4:	4802      	ldr	r0, [pc, #8]	@ (8000cb0 <TIM2_IRQHandler+0x10>)
 8000ca6:	f002 fae3 	bl	8003270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000008c 	.word	0x2000008c

08000cb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <TIM3_IRQHandler+0x10>)
 8000cba:	f002 fad9 	bl	8003270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200000d8 	.word	0x200000d8

08000cc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cec:	480d      	ldr	r0, [pc, #52]	@ (8000d24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cf0:	f7ff ffea 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf4:	480c      	ldr	r0, [pc, #48]	@ (8000d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf6:	490d      	ldr	r1, [pc, #52]	@ (8000d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <LoopForever+0xe>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d38 <LoopForever+0x16>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f005 f82f 	bl	8005d7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d1e:	f7ff fca5 	bl	800066c <main>

08000d22 <LoopForever>:

LoopForever:
    b LoopForever
 8000d22:	e7fe      	b.n	8000d22 <LoopForever>
  ldr   r0, =_estack
 8000d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d30:	08005e34 	.word	0x08005e34
  ldr r2, =_sbss
 8000d34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d38:	200005d8 	.word	0x200005d8

08000d3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC1_2_IRQHandler>

08000d3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f95b 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4e:	200f      	movs	r0, #15
 8000d50:	f000 f80e 	bl	8000d70 <HAL_InitTick>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	e001      	b.n	8000d64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d60:	f7ff fe9e 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d64:	79fb      	ldrb	r3, [r7, #7]

}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <HAL_InitTick+0x68>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d022      	beq.n	8000dca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <HAL_InitTick+0x6c>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <HAL_InitTick+0x68>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f966 	bl	800106a <HAL_SYSTICK_Config>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10f      	bne.n	8000dc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b0f      	cmp	r3, #15
 8000da8:	d809      	bhi.n	8000dbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000daa:	2200      	movs	r2, #0
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000db2:	f000 f932 	bl	800101a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <HAL_InitTick+0x70>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	e007      	b.n	8000dce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
 8000dc2:	e004      	b.n	8000dce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e001      	b.n	8000dce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <HAL_IncTick+0x1c>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_IncTick+0x20>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a03      	ldr	r2, [pc, #12]	@ (8000e00 <HAL_IncTick+0x1c>)
 8000df4:	6013      	str	r3, [r2, #0]
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	200005d4 	.word	0x200005d4
 8000e04:	20000008 	.word	0x20000008

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	@ (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200005d4 	.word	0x200005d4

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e38:	d004      	beq.n	8000e44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_Delay+0x40>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	4413      	add	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e44:	bf00      	nop
 8000e46:	f7ff ffdf 	bl	8000e08 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d8f7      	bhi.n	8000e46 <HAL_Delay+0x26>
  {
  }
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000008 	.word	0x20000008

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff29 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff40 	bl	8000eac <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff90 	bl	8000f58 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5f 	bl	8000f04 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff33 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffa4 	bl	8000fc0 <SysTick_Config>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e147      	b.n	8001326 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d106      	bne.n	80010b0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fd1c 	bl	8000ae8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0210 	bic.w	r2, r2, #16
 80010be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c0:	f7ff fea2 	bl	8000e08 <HAL_GetTick>
 80010c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010c6:	e012      	b.n	80010ee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010c8:	f7ff fe9e 	bl	8000e08 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b0a      	cmp	r3, #10
 80010d4:	d90b      	bls.n	80010ee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010da:	f043 0201 	orr.w	r2, r3, #1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2203      	movs	r2, #3
 80010e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e11b      	b.n	8001326 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d0e5      	beq.n	80010c8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	699a      	ldr	r2, [r3, #24]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800110c:	f7ff fe7c 	bl	8000e08 <HAL_GetTick>
 8001110:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001112:	e012      	b.n	800113a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001114:	f7ff fe78 	bl	8000e08 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b0a      	cmp	r3, #10
 8001120:	d90b      	bls.n	800113a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001126:	f043 0201 	orr.w	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e0f5      	b.n	8001326 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0e5      	beq.n	8001114 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	699a      	ldr	r2, [r3, #24]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0202 	orr.w	r2, r2, #2
 8001156:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a74      	ldr	r2, [pc, #464]	@ (8001330 <HAL_FDCAN_Init+0x2ac>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d103      	bne.n	800116a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001162:	4a74      	ldr	r2, [pc, #464]	@ (8001334 <HAL_FDCAN_Init+0x2b0>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7c1b      	ldrb	r3, [r3, #16]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	699a      	ldr	r2, [r3, #24]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001180:	619a      	str	r2, [r3, #24]
 8001182:	e007      	b.n	8001194 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	699a      	ldr	r2, [r3, #24]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001192:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7c5b      	ldrb	r3, [r3, #17]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d108      	bne.n	80011ae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	699a      	ldr	r2, [r3, #24]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011aa:	619a      	str	r2, [r3, #24]
 80011ac:	e007      	b.n	80011be <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	699a      	ldr	r2, [r3, #24]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7c9b      	ldrb	r3, [r3, #18]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d108      	bne.n	80011d8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699a      	ldr	r2, [r3, #24]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011d4:	619a      	str	r2, [r3, #24]
 80011d6:	e007      	b.n	80011e8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	699a      	ldr	r2, [r3, #24]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80011e6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699a      	ldr	r2, [r3, #24]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800120c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0210 	bic.w	r2, r2, #16
 800121c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0204 	orr.w	r2, r2, #4
 8001234:	619a      	str	r2, [r3, #24]
 8001236:	e02c      	b.n	8001292 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d028      	beq.n	8001292 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d01c      	beq.n	8001282 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699a      	ldr	r2, [r3, #24]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001256:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0210 	orr.w	r2, r2, #16
 8001266:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b03      	cmp	r3, #3
 800126e:	d110      	bne.n	8001292 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	699a      	ldr	r2, [r3, #24]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0220 	orr.w	r2, r2, #32
 800127e:	619a      	str	r2, [r3, #24]
 8001280:	e007      	b.n	8001292 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0220 	orr.w	r2, r2, #32
 8001290:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	3b01      	subs	r3, #1
 8001298:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	3b01      	subs	r3, #1
 80012a0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012a2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012aa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012ba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012bc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80012c6:	d115      	bne.n	80012f4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012cc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d2:	3b01      	subs	r3, #1
 80012d4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012d6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	3b01      	subs	r3, #1
 80012de:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012e0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	3b01      	subs	r3, #1
 80012ea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012f0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012f2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fc64 	bl	8001bd8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40006400 	.word	0x40006400
 8001334:	40006500 	.word	0x40006500

08001338 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001348:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d002      	beq.n	8001356 <HAL_FDCAN_ConfigFilter+0x1e>
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d13d      	bne.n	80013d2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d119      	bne.n	8001392 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800136a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001372:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e01d      	b.n	80013ce <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	075a      	lsls	r2, r3, #29
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	079a      	lsls	r2, r3, #30
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4413      	add	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	3304      	adds	r3, #4
 80013c6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e006      	b.n	80013e0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d6:	f043 0202 	orr.w	r2, r3, #2
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
  }
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	371c      	adds	r7, #28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d110      	bne.n	8001422 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2202      	movs	r2, #2
 8001404:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699a      	ldr	r2, [r3, #24]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0201 	bic.w	r2, r2, #1
 8001416:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e006      	b.n	8001430 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001426:	f043 0204 	orr.w	r2, r3, #4
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
  }
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d12c      	bne.n	80014ae <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800145c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001468:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e023      	b.n	80014bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 fc10 	bl	8001cb0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80014a0:	2201      	movs	r2, #1
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	409a      	lsls	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e006      	b.n	80014bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b2:	f043 0208 	orr.w	r2, r3, #8
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
  }
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b08b      	sub	sp, #44	@ 0x2c
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014dc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80014de:	7efb      	ldrb	r3, [r7, #27]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	f040 80e8 	bne.w	80016b6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b40      	cmp	r3, #64	@ 0x40
 80014ea:	d137      	bne.n	800155c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001500:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0db      	b.n	80016c4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001514:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800151c:	d10a      	bne.n	8001534 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800152a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800152e:	d101      	bne.n	8001534 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001530:	2301      	movs	r3, #1
 8001532:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
 800155a:	e036      	b.n	80015ca <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	2b00      	cmp	r3, #0
 800156a:	d107      	bne.n	800157c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001570:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0a3      	b.n	80016c4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001584:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800158c:	d10a      	bne.n	80015a4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800159e:	d101      	bne.n	80015a4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d107      	bne.n	80015ee <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	0c9b      	lsrs	r3, r3, #18
 80015e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e005      	b.n	80015fa <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	3304      	adds	r3, #4
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	b29a      	uxth	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0c1b      	lsrs	r3, r3, #16
 8001628:	f003 020f 	and.w	r2, r3, #15
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	0e1b      	lsrs	r3, r3, #24
 800164e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	0fda      	lsrs	r2, r3, #31
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	3304      	adds	r3, #4
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
 800166e:	e00a      	b.n	8001686 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	441a      	add	r2, r3
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	440b      	add	r3, r1
 800167c:	7812      	ldrb	r2, [r2, #0]
 800167e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	3301      	adds	r3, #1
 8001684:	623b      	str	r3, [r7, #32]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	4a11      	ldr	r2, [pc, #68]	@ (80016d0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	461a      	mov	r2, r3
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	4293      	cmp	r3, r2
 8001694:	d3ec      	bcc.n	8001670 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b40      	cmp	r3, #64	@ 0x40
 800169a:	d105      	bne.n	80016a8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80016a6:	e004      	b.n	80016b2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e006      	b.n	80016c4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ba:	f043 0208 	orr.w	r2, r3, #8
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
  }
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	372c      	adds	r7, #44	@ 0x2c
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	08005e18 	.word	0x08005e18

080016d4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016e6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d003      	beq.n	80016f6 <HAL_FDCAN_ActivateNotification+0x22>
 80016ee:	7dfb      	ldrb	r3, [r7, #23]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	f040 80c8 	bne.w	8001886 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	2b00      	cmp	r3, #0
 8001706:	d004      	beq.n	8001712 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d03b      	beq.n	800178a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d031      	beq.n	800178a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	d027      	beq.n	800178a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d01d      	beq.n	800178a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	d013      	beq.n	800178a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00c      	beq.n	800179a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d107      	bne.n	800179a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0201 	orr.w	r2, r2, #1
 8001798:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d13b      	bne.n	8001826 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d131      	bne.n	8001826 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d127      	bne.n	8001826 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d11d      	bne.n	8001826 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d004      	beq.n	80017fe <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d113      	bne.n	8001826 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f003 0320 	and.w	r3, r3, #32
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00c      	beq.n	8001836 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0202 	orr.w	r2, r2, #2
 8001834:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800183c:	2b00      	cmp	r3, #0
 800183e:	d009      	beq.n	8001854 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	430a      	orrs	r2, r1
 8001850:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	430a      	orrs	r2, r1
 800186e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	430a      	orrs	r2, r1
 8001880:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e006      	b.n	8001894 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188a:	f043 0202 	orr.w	r2, r3, #2
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
  }
}
 8001894:	4618      	mov	r0, r3
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	@ 0x30
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ae:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018bc:	4013      	ands	r3, r2
 80018be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018d4:	4013      	ands	r3, r2
 80018d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ec:	4013      	ands	r3, r2
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018f6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80018fa:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001902:	6a3a      	ldr	r2, [r7, #32]
 8001904:	4013      	ands	r3, r2
 8001906:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800190e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001912:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	4013      	ands	r3, r2
 800191e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001926:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800192e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	099b      	lsrs	r3, r3, #6
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00c      	beq.n	8001956 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	099b      	lsrs	r3, r3, #6
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2240      	movs	r2, #64	@ 0x40
 800194e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f922 	bl	8001b9a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01a      	beq.n	8001998 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d014      	beq.n	8001998 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001976:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800198e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001990:	6939      	ldr	r1, [r7, #16]
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f8e2 	bl	8001b5c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019a4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80019a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f8ac 	bl	8001b06 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80019ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d007      	beq.n	80019c4 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019ba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80019bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe fc2a 	bl	8000218 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80019d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f8a1 	bl	8001b1c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	0a5b      	lsrs	r3, r3, #9
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00d      	beq.n	8001a02 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	0a5b      	lsrs	r3, r3, #9
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f898 	bl	8001b32 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	09db      	lsrs	r3, r3, #7
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d019      	beq.n	8001a42 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	09db      	lsrs	r3, r3, #7
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d013      	beq.n	8001a42 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a22:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2280      	movs	r2, #128	@ 0x80
 8001a38:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f882 	bl	8001b46 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	0b5b      	lsrs	r3, r3, #13
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00d      	beq.n	8001a6a <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	0b5b      	lsrs	r3, r3, #13
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a62:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f884 	bl	8001b72 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	0bdb      	lsrs	r3, r3, #15
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00d      	beq.n	8001a92 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	0bdb      	lsrs	r3, r3, #15
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a8a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f87a 	bl	8001b86 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	0b9b      	lsrs	r3, r3, #14
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d010      	beq.n	8001ac0 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	0b9b      	lsrs	r3, r3, #14
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ab2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001ace:	69f9      	ldr	r1, [r7, #28]
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f876 	bl	8001bc2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d009      	beq.n	8001af0 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6a3a      	ldr	r2, [r7, #32]
 8001ae2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f858 	bl	8001bae <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001afe:	bf00      	nop
 8001b00:	3730      	adds	r7, #48	@ 0x30
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001be0:	4b30      	ldr	r3, [pc, #192]	@ (8001ca4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001be2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2f      	ldr	r2, [pc, #188]	@ (8001ca8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d103      	bne.n	8001bf6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001bf4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2c      	ldr	r2, [pc, #176]	@ (8001cac <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d103      	bne.n	8001c08 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001c06:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c16:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c1e:	041a      	lsls	r2, r3, #16
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c3c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c44:	061a      	lsls	r2, r3, #24
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e005      	b.n	8001c8a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3304      	adds	r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d3f3      	bcc.n	8001c7e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	4000a400 	.word	0x4000a400
 8001ca8:	40006800 	.word	0x40006800
 8001cac:	40006c00 	.word	0x40006c00

08001cb0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001cce:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e00a      	b.n	8001cf2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001ce4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001cea:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cf0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001cfc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001d02:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001d08:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e020      	b.n	8001d86 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3303      	adds	r3, #3
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3302      	adds	r3, #2
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	440b      	add	r3, r1
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d5c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	440b      	add	r3, r1
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d6a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	440a      	add	r2, r1
 8001d72:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d74:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3304      	adds	r3, #4
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a06      	ldr	r2, [pc, #24]	@ (8001da4 <FDCAN_CopyMessageToRAM+0xf4>)
 8001d8c:	5cd3      	ldrb	r3, [r2, r3]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d3d6      	bcc.n	8001d44 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	3724      	adds	r7, #36	@ 0x24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	08005e18 	.word	0x08005e18

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001db6:	e15a      	b.n	800206e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 814c 	beq.w	8002068 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d005      	beq.n	8001de8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d130      	bne.n	8001e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e1e:	2201      	movs	r2, #1
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	f003 0201 	and.w	r2, r3, #1
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d017      	beq.n	8001e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d123      	bne.n	8001eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	08da      	lsrs	r2, r3, #3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3208      	adds	r2, #8
 8001ed4:	6939      	ldr	r1, [r7, #16]
 8001ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0203 	and.w	r2, r3, #3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80a6 	beq.w	8002068 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1c:	4b5b      	ldr	r3, [pc, #364]	@ (800208c <HAL_GPIO_Init+0x2e4>)
 8001f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f20:	4a5a      	ldr	r2, [pc, #360]	@ (800208c <HAL_GPIO_Init+0x2e4>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f28:	4b58      	ldr	r3, [pc, #352]	@ (800208c <HAL_GPIO_Init+0x2e4>)
 8001f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f34:	4a56      	ldr	r2, [pc, #344]	@ (8002090 <HAL_GPIO_Init+0x2e8>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f5e:	d01f      	beq.n	8001fa0 <HAL_GPIO_Init+0x1f8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a4c      	ldr	r2, [pc, #304]	@ (8002094 <HAL_GPIO_Init+0x2ec>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d019      	beq.n	8001f9c <HAL_GPIO_Init+0x1f4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a4b      	ldr	r2, [pc, #300]	@ (8002098 <HAL_GPIO_Init+0x2f0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_GPIO_Init+0x1f0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a4a      	ldr	r2, [pc, #296]	@ (800209c <HAL_GPIO_Init+0x2f4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00d      	beq.n	8001f94 <HAL_GPIO_Init+0x1ec>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a49      	ldr	r2, [pc, #292]	@ (80020a0 <HAL_GPIO_Init+0x2f8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d007      	beq.n	8001f90 <HAL_GPIO_Init+0x1e8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a48      	ldr	r2, [pc, #288]	@ (80020a4 <HAL_GPIO_Init+0x2fc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_GPIO_Init+0x1e4>
 8001f88:	2305      	movs	r3, #5
 8001f8a:	e00a      	b.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001f8c:	2306      	movs	r3, #6
 8001f8e:	e008      	b.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001f90:	2304      	movs	r3, #4
 8001f92:	e006      	b.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001f94:	2303      	movs	r3, #3
 8001f96:	e004      	b.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e002      	b.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	f002 0203 	and.w	r2, r2, #3
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	4093      	lsls	r3, r2
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb2:	4937      	ldr	r1, [pc, #220]	@ (8002090 <HAL_GPIO_Init+0x2e8>)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fc0:	4b39      	ldr	r3, [pc, #228]	@ (80020a8 <HAL_GPIO_Init+0x300>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fe4:	4a30      	ldr	r2, [pc, #192]	@ (80020a8 <HAL_GPIO_Init+0x300>)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fea:	4b2f      	ldr	r3, [pc, #188]	@ (80020a8 <HAL_GPIO_Init+0x300>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800200e:	4a26      	ldr	r2, [pc, #152]	@ (80020a8 <HAL_GPIO_Init+0x300>)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002014:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <HAL_GPIO_Init+0x300>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002038:	4a1b      	ldr	r2, [pc, #108]	@ (80020a8 <HAL_GPIO_Init+0x300>)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800203e:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <HAL_GPIO_Init+0x300>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002062:	4a11      	ldr	r2, [pc, #68]	@ (80020a8 <HAL_GPIO_Init+0x300>)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	3301      	adds	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f ae9d 	bne.w	8001db8 <HAL_GPIO_Init+0x10>
  }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000
 8002094:	48000400 	.word	0x48000400
 8002098:	48000800 	.word	0x48000800
 800209c:	48000c00 	.word	0x48000c00
 80020a0:	48001000 	.word	0x48001000
 80020a4:	48001400 	.word	0x48001400
 80020a8:	40010400 	.word	0x40010400

080020ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	041a      	lsls	r2, r3, #16
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43d9      	mvns	r1, r3
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	400b      	ands	r3, r1
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d141      	bne.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ee:	4b4b      	ldr	r3, [pc, #300]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fa:	d131      	bne.n	8002160 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020fc:	4b47      	ldr	r3, [pc, #284]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002102:	4a46      	ldr	r2, [pc, #280]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002108:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800210c:	4b43      	ldr	r3, [pc, #268]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002114:	4a41      	ldr	r2, [pc, #260]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800211c:	4b40      	ldr	r3, [pc, #256]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2232      	movs	r2, #50	@ 0x32
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	4a3f      	ldr	r2, [pc, #252]	@ (8002224 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	0c9b      	lsrs	r3, r3, #18
 800212e:	3301      	adds	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002132:	e002      	b.n	800213a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3b01      	subs	r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800213a:	4b38      	ldr	r3, [pc, #224]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002146:	d102      	bne.n	800214e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f2      	bne.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800214e:	4b33      	ldr	r3, [pc, #204]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215a:	d158      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e057      	b.n	8002210 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002160:	4b2e      	ldr	r3, [pc, #184]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002166:	4a2d      	ldr	r2, [pc, #180]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800216c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002170:	e04d      	b.n	800220e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002178:	d141      	bne.n	80021fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800217a:	4b28      	ldr	r3, [pc, #160]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002186:	d131      	bne.n	80021ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002188:	4b24      	ldr	r3, [pc, #144]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800218e:	4a23      	ldr	r2, [pc, #140]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002194:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002198:	4b20      	ldr	r3, [pc, #128]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021a0:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2232      	movs	r2, #50	@ 0x32
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002224 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	0c9b      	lsrs	r3, r3, #18
 80021ba:	3301      	adds	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021be:	e002      	b.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021c6:	4b15      	ldr	r3, [pc, #84]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d2:	d102      	bne.n	80021da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f2      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021da:	4b10      	ldr	r3, [pc, #64]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e6:	d112      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e011      	b.n	8002210 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021f2:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021fc:	e007      	b.n	800220e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021fe:	4b07      	ldr	r3, [pc, #28]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002206:	4a05      	ldr	r2, [pc, #20]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002208:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800220c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40007000 	.word	0x40007000
 8002220:	20000000 	.word	0x20000000
 8002224:	431bde83 	.word	0x431bde83

08002228 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800222c:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002232:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002236:	6093      	str	r3, [r2, #8]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40007000 	.word	0x40007000

08002248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e2fe      	b.n	8002858 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d075      	beq.n	8002352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002266:	4b97      	ldr	r3, [pc, #604]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002270:	4b94      	ldr	r3, [pc, #592]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b0c      	cmp	r3, #12
 800227e:	d102      	bne.n	8002286 <HAL_RCC_OscConfig+0x3e>
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d002      	beq.n	800228c <HAL_RCC_OscConfig+0x44>
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d10b      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	4b8d      	ldr	r3, [pc, #564]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d05b      	beq.n	8002350 <HAL_RCC_OscConfig+0x108>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d157      	bne.n	8002350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e2d9      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ac:	d106      	bne.n	80022bc <HAL_RCC_OscConfig+0x74>
 80022ae:	4b85      	ldr	r3, [pc, #532]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a84      	ldr	r2, [pc, #528]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e01d      	b.n	80022f8 <HAL_RCC_OscConfig+0xb0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x98>
 80022c6:	4b7f      	ldr	r3, [pc, #508]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a7e      	ldr	r2, [pc, #504]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b7c      	ldr	r3, [pc, #496]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a7b      	ldr	r2, [pc, #492]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0xb0>
 80022e0:	4b78      	ldr	r3, [pc, #480]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a77      	ldr	r2, [pc, #476]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b75      	ldr	r3, [pc, #468]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a74      	ldr	r2, [pc, #464]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fd82 	bl	8000e08 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe fd7e 	bl	8000e08 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	@ 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e29e      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231a:	4b6a      	ldr	r3, [pc, #424]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0xc0>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fd6e 	bl	8000e08 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe fd6a 	bl	8000e08 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	@ 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e28a      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002342:	4b60      	ldr	r3, [pc, #384]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0xe8>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d075      	beq.n	800244a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235e:	4b59      	ldr	r3, [pc, #356]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002368:	4b56      	ldr	r3, [pc, #344]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d102      	bne.n	800237e <HAL_RCC_OscConfig+0x136>
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d002      	beq.n	8002384 <HAL_RCC_OscConfig+0x13c>
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d11f      	bne.n	80023c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002384:	4b4f      	ldr	r3, [pc, #316]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_OscConfig+0x154>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e25d      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239c:	4b49      	ldr	r3, [pc, #292]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	061b      	lsls	r3, r3, #24
 80023aa:	4946      	ldr	r1, [pc, #280]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023b0:	4b45      	ldr	r3, [pc, #276]	@ (80024c8 <HAL_RCC_OscConfig+0x280>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fcdb 	bl	8000d70 <HAL_InitTick>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d043      	beq.n	8002448 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e249      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d023      	beq.n	8002414 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023cc:	4b3d      	ldr	r3, [pc, #244]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a3c      	ldr	r2, [pc, #240]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe fd16 	bl	8000e08 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e0:	f7fe fd12 	bl	8000e08 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e232      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f2:	4b34      	ldr	r3, [pc, #208]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b31      	ldr	r3, [pc, #196]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	061b      	lsls	r3, r3, #24
 800240c:	492d      	ldr	r1, [pc, #180]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
 8002412:	e01a      	b.n	800244a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002414:	4b2b      	ldr	r3, [pc, #172]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2a      	ldr	r2, [pc, #168]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800241a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800241e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7fe fcf2 	bl	8000e08 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002428:	f7fe fcee 	bl	8000e08 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e20e      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800243a:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x1e0>
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002448:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d041      	beq.n	80024da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01c      	beq.n	8002498 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245e:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 8002460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002464:	4a17      	ldr	r2, [pc, #92]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246e:	f7fe fccb 	bl	8000e08 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002476:	f7fe fcc7 	bl	8000e08 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e1e7      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002488:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0ef      	beq.n	8002476 <HAL_RCC_OscConfig+0x22e>
 8002496:	e020      	b.n	80024da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002498:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800249a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800249e:	4a09      	ldr	r2, [pc, #36]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7fe fcae 	bl	8000e08 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024ae:	e00d      	b.n	80024cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe fcaa 	bl	8000e08 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d906      	bls.n	80024cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e1ca      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024cc:	4b8c      	ldr	r3, [pc, #560]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 80024ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1ea      	bne.n	80024b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80a6 	beq.w	8002634 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024ec:	4b84      	ldr	r3, [pc, #528]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 80024ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_OscConfig+0x2b4>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x2b6>
 80024fc:	2300      	movs	r3, #0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00d      	beq.n	800251e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	4b7f      	ldr	r3, [pc, #508]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002506:	4a7e      	ldr	r2, [pc, #504]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800250c:	6593      	str	r3, [r2, #88]	@ 0x58
 800250e:	4b7c      	ldr	r3, [pc, #496]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800251a:	2301      	movs	r3, #1
 800251c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800251e:	4b79      	ldr	r3, [pc, #484]	@ (8002704 <HAL_RCC_OscConfig+0x4bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d118      	bne.n	800255c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800252a:	4b76      	ldr	r3, [pc, #472]	@ (8002704 <HAL_RCC_OscConfig+0x4bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a75      	ldr	r2, [pc, #468]	@ (8002704 <HAL_RCC_OscConfig+0x4bc>)
 8002530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002536:	f7fe fc67 	bl	8000e08 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253e:	f7fe fc63 	bl	8000e08 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e183      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002550:	4b6c      	ldr	r3, [pc, #432]	@ (8002704 <HAL_RCC_OscConfig+0x4bc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d108      	bne.n	8002576 <HAL_RCC_OscConfig+0x32e>
 8002564:	4b66      	ldr	r3, [pc, #408]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256a:	4a65      	ldr	r2, [pc, #404]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002574:	e024      	b.n	80025c0 <HAL_RCC_OscConfig+0x378>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b05      	cmp	r3, #5
 800257c:	d110      	bne.n	80025a0 <HAL_RCC_OscConfig+0x358>
 800257e:	4b60      	ldr	r3, [pc, #384]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002584:	4a5e      	ldr	r2, [pc, #376]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800258e:	4b5c      	ldr	r3, [pc, #368]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002594:	4a5a      	ldr	r2, [pc, #360]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800259e:	e00f      	b.n	80025c0 <HAL_RCC_OscConfig+0x378>
 80025a0:	4b57      	ldr	r3, [pc, #348]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a6:	4a56      	ldr	r2, [pc, #344]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025b0:	4b53      	ldr	r3, [pc, #332]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b6:	4a52      	ldr	r2, [pc, #328]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d016      	beq.n	80025f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7fe fc1e 	bl	8000e08 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7fe fc1a 	bl	8000e08 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e138      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e6:	4b46      	ldr	r3, [pc, #280]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ed      	beq.n	80025d0 <HAL_RCC_OscConfig+0x388>
 80025f4:	e015      	b.n	8002622 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7fe fc07 	bl	8000e08 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7fe fc03 	bl	8000e08 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e121      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002614:	4b3a      	ldr	r3, [pc, #232]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1ed      	bne.n	80025fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002622:	7ffb      	ldrb	r3, [r7, #31]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d105      	bne.n	8002634 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002628:	4b35      	ldr	r3, [pc, #212]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262c:	4a34      	ldr	r2, [pc, #208]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 800262e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002632:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d03c      	beq.n	80026ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01c      	beq.n	8002682 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002648:	4b2d      	ldr	r3, [pc, #180]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 800264a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800264e:	4a2c      	ldr	r2, [pc, #176]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7fe fbd6 	bl	8000e08 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002660:	f7fe fbd2 	bl	8000e08 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0f2      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002672:	4b23      	ldr	r3, [pc, #140]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 8002674:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ef      	beq.n	8002660 <HAL_RCC_OscConfig+0x418>
 8002680:	e01b      	b.n	80026ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002682:	4b1f      	ldr	r3, [pc, #124]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 8002684:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002688:	4a1d      	ldr	r2, [pc, #116]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7fe fbb9 	bl	8000e08 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800269a:	f7fe fbb5 	bl	8000e08 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0d5      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026ac:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 80026ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ef      	bne.n	800269a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80c9 	beq.w	8002856 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030c 	and.w	r3, r3, #12
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	f000 8083 	beq.w	80027d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d15e      	bne.n	8002798 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a08      	ldr	r2, [pc, #32]	@ (8002700 <HAL_RCC_OscConfig+0x4b8>)
 80026e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe fb8f 	bl	8000e08 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ec:	e00c      	b.n	8002708 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fe fb8b 	bl	8000e08 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d905      	bls.n	8002708 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e0ab      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
 8002700:	40021000 	.word	0x40021000
 8002704:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002708:	4b55      	ldr	r3, [pc, #340]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ec      	bne.n	80026ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002714:	4b52      	ldr	r3, [pc, #328]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	4b52      	ldr	r3, [pc, #328]	@ (8002864 <HAL_RCC_OscConfig+0x61c>)
 800271a:	4013      	ands	r3, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6a11      	ldr	r1, [r2, #32]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002724:	3a01      	subs	r2, #1
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	4311      	orrs	r1, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800272e:	0212      	lsls	r2, r2, #8
 8002730:	4311      	orrs	r1, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002736:	0852      	lsrs	r2, r2, #1
 8002738:	3a01      	subs	r2, #1
 800273a:	0552      	lsls	r2, r2, #21
 800273c:	4311      	orrs	r1, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002742:	0852      	lsrs	r2, r2, #1
 8002744:	3a01      	subs	r2, #1
 8002746:	0652      	lsls	r2, r2, #25
 8002748:	4311      	orrs	r1, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800274e:	06d2      	lsls	r2, r2, #27
 8002750:	430a      	orrs	r2, r1
 8002752:	4943      	ldr	r1, [pc, #268]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 8002754:	4313      	orrs	r3, r2
 8002756:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002758:	4b41      	ldr	r3, [pc, #260]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a40      	ldr	r2, [pc, #256]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 800275e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002762:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002764:	4b3e      	ldr	r3, [pc, #248]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a3d      	ldr	r2, [pc, #244]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 800276a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800276e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe fb4a 	bl	8000e08 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002778:	f7fe fb46 	bl	8000e08 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e066      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278a:	4b35      	ldr	r3, [pc, #212]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x530>
 8002796:	e05e      	b.n	8002856 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b31      	ldr	r3, [pc, #196]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a30      	ldr	r2, [pc, #192]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 800279e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fb30 	bl	8000e08 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe fb2c 	bl	8000e08 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e04c      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027be:	4b28      	ldr	r3, [pc, #160]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027ca:	4b25      	ldr	r3, [pc, #148]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	4924      	ldr	r1, [pc, #144]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 80027d0:	4b25      	ldr	r3, [pc, #148]	@ (8002868 <HAL_RCC_OscConfig+0x620>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	60cb      	str	r3, [r1, #12]
 80027d6:	e03e      	b.n	8002856 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e039      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <HAL_RCC_OscConfig+0x618>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0203 	and.w	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d12c      	bne.n	8002852 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	3b01      	subs	r3, #1
 8002804:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d123      	bne.n	8002852 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d11b      	bne.n	8002852 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002824:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d113      	bne.n	8002852 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d109      	bne.n	8002852 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	3b01      	subs	r3, #1
 800284c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	019f800c 	.word	0x019f800c
 8002868:	feeefffc 	.word	0xfeeefffc

0800286c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e11e      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b91      	ldr	r3, [pc, #580]	@ (8002acc <HAL_RCC_ClockConfig+0x260>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d910      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b8e      	ldr	r3, [pc, #568]	@ (8002acc <HAL_RCC_ClockConfig+0x260>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 020f 	bic.w	r2, r3, #15
 800289a:	498c      	ldr	r1, [pc, #560]	@ (8002acc <HAL_RCC_ClockConfig+0x260>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b8a      	ldr	r3, [pc, #552]	@ (8002acc <HAL_RCC_ClockConfig+0x260>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e106      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d073      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d129      	bne.n	800291c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c8:	4b81      	ldr	r3, [pc, #516]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0f4      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028d8:	f000 f966 	bl	8002ba8 <RCC_GetSysClockFreqFromPLLSource>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4a7c      	ldr	r2, [pc, #496]	@ (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d93f      	bls.n	8002966 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028e6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d033      	beq.n	8002966 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002902:	2b00      	cmp	r3, #0
 8002904:	d12f      	bne.n	8002966 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002906:	4b72      	ldr	r3, [pc, #456]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800290e:	4a70      	ldr	r2, [pc, #448]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002914:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002916:	2380      	movs	r3, #128	@ 0x80
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	e024      	b.n	8002966 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d107      	bne.n	8002934 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002924:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d109      	bne.n	8002944 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0c6      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002934:	4b66      	ldr	r3, [pc, #408]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0be      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002944:	f000 f8ce 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002948:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4a61      	ldr	r2, [pc, #388]	@ (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d909      	bls.n	8002966 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002952:	4b5f      	ldr	r3, [pc, #380]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800295a:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 800295c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002960:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002966:	4b5a      	ldr	r3, [pc, #360]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f023 0203 	bic.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4957      	ldr	r1, [pc, #348]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002978:	f7fe fa46 	bl	8000e08 <HAL_GetTick>
 800297c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	e00a      	b.n	8002996 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002980:	f7fe fa42 	bl	8000e08 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e095      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	4b4e      	ldr	r3, [pc, #312]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 020c 	and.w	r2, r3, #12
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d1eb      	bne.n	8002980 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d023      	beq.n	80029fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c0:	4b43      	ldr	r3, [pc, #268]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a42      	ldr	r2, [pc, #264]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 80029c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029d8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80029e0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 80029e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e8:	4b39      	ldr	r3, [pc, #228]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4936      	ldr	r1, [pc, #216]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b80      	cmp	r3, #128	@ 0x80
 8002a00:	d105      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a02:	4b33      	ldr	r3, [pc, #204]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	4a32      	ldr	r2, [pc, #200]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002a08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002acc <HAL_RCC_ClockConfig+0x260>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d21d      	bcs.n	8002a58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002acc <HAL_RCC_ClockConfig+0x260>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 020f 	bic.w	r2, r3, #15
 8002a24:	4929      	ldr	r1, [pc, #164]	@ (8002acc <HAL_RCC_ClockConfig+0x260>)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a2c:	f7fe f9ec 	bl	8000e08 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a34:	f7fe f9e8 	bl	8000e08 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e03b      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b20      	ldr	r3, [pc, #128]	@ (8002acc <HAL_RCC_ClockConfig+0x260>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1ed      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4917      	ldr	r1, [pc, #92]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a82:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	490f      	ldr	r1, [pc, #60]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a96:	f000 f825 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	490c      	ldr	r1, [pc, #48]	@ (8002ad8 <HAL_RCC_ClockConfig+0x26c>)
 8002aa8:	5ccb      	ldrb	r3, [r1, r3]
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8002adc <HAL_RCC_ClockConfig+0x270>)
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <HAL_RCC_ClockConfig+0x274>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe f958 	bl	8000d70 <HAL_InitTick>
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40022000 	.word	0x40022000
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	04c4b400 	.word	0x04c4b400
 8002ad8:	08005e08 	.word	0x08005e08
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002aea:	4b2c      	ldr	r3, [pc, #176]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d102      	bne.n	8002afc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002af6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	e047      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002afc:	4b27      	ldr	r3, [pc, #156]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d102      	bne.n	8002b0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b08:	4b26      	ldr	r3, [pc, #152]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	e03e      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b0e:	4b23      	ldr	r3, [pc, #140]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b0c      	cmp	r3, #12
 8002b18:	d136      	bne.n	8002b88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b1a:	4b20      	ldr	r3, [pc, #128]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d10c      	bne.n	8002b52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b38:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	4a16      	ldr	r2, [pc, #88]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b42:	68d2      	ldr	r2, [r2, #12]
 8002b44:	0a12      	lsrs	r2, r2, #8
 8002b46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	617b      	str	r3, [r7, #20]
      break;
 8002b50:	e00c      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b52:	4a13      	ldr	r2, [pc, #76]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5a:	4a10      	ldr	r2, [pc, #64]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b5c:	68d2      	ldr	r2, [r2, #12]
 8002b5e:	0a12      	lsrs	r2, r2, #8
 8002b60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]
      break;
 8002b6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0e5b      	lsrs	r3, r3, #25
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	3301      	adds	r3, #1
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	e001      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b8c:	693b      	ldr	r3, [r7, #16]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	00f42400 	.word	0x00f42400
 8002ba4:	007a1200 	.word	0x007a1200

08002ba8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bae:	4b1e      	ldr	r3, [pc, #120]	@ (8002c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d10c      	bne.n	8002be6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bcc:	4a17      	ldr	r2, [pc, #92]	@ (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	4a14      	ldr	r2, [pc, #80]	@ (8002c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bd6:	68d2      	ldr	r2, [r2, #12]
 8002bd8:	0a12      	lsrs	r2, r2, #8
 8002bda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	617b      	str	r3, [r7, #20]
    break;
 8002be4:	e00c      	b.n	8002c00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002be6:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	4a0e      	ldr	r2, [pc, #56]	@ (8002c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bf0:	68d2      	ldr	r2, [r2, #12]
 8002bf2:	0a12      	lsrs	r2, r2, #8
 8002bf4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]
    break;
 8002bfe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c00:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	0e5b      	lsrs	r3, r3, #25
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c1a:	687b      	ldr	r3, [r7, #4]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	007a1200 	.word	0x007a1200
 8002c30:	00f42400 	.word	0x00f42400

08002c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c40:	2300      	movs	r3, #0
 8002c42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8098 	beq.w	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c56:	4b43      	ldr	r3, [pc, #268]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4b40      	ldr	r3, [pc, #256]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c66:	4a3f      	ldr	r2, [pc, #252]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a39      	ldr	r2, [pc, #228]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c8a:	f7fe f8bd 	bl	8000e08 <HAL_GetTick>
 8002c8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c90:	e009      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7fe f8b9 	bl	8000e08 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d902      	bls.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ca4:	e005      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca6:	4b30      	ldr	r3, [pc, #192]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0ef      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d159      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01e      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d019      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cd4:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ce0:	4b20      	ldr	r3, [pc, #128]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d00:	4a18      	ldr	r2, [pc, #96]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d016      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fe f879 	bl	8000e08 <HAL_GetTick>
 8002d16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d18:	e00b      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fe f875 	bl	8000e08 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d902      	bls.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	74fb      	strb	r3, [r7, #19]
            break;
 8002d30:	e006      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d32:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ec      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10b      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d46:	4b07      	ldr	r3, [pc, #28]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d54:	4903      	ldr	r1, [pc, #12]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d5c:	e008      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d5e:	7cfb      	ldrb	r3, [r7, #19]
 8002d60:	74bb      	strb	r3, [r7, #18]
 8002d62:	e005      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d70:	7c7b      	ldrb	r3, [r7, #17]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d105      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d76:	4ba7      	ldr	r3, [pc, #668]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7a:	4aa6      	ldr	r2, [pc, #664]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d8e:	4ba1      	ldr	r3, [pc, #644]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d94:	f023 0203 	bic.w	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	499d      	ldr	r1, [pc, #628]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002db0:	4b98      	ldr	r3, [pc, #608]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db6:	f023 020c 	bic.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4995      	ldr	r1, [pc, #596]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dd2:	4b90      	ldr	r3, [pc, #576]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	498c      	ldr	r1, [pc, #560]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002df4:	4b87      	ldr	r3, [pc, #540]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	4984      	ldr	r1, [pc, #528]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e16:	4b7f      	ldr	r3, [pc, #508]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	497b      	ldr	r1, [pc, #492]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e38:	4b76      	ldr	r3, [pc, #472]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	4973      	ldr	r1, [pc, #460]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e5a:	4b6e      	ldr	r3, [pc, #440]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	496a      	ldr	r1, [pc, #424]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e7c:	4b65      	ldr	r3, [pc, #404]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4962      	ldr	r1, [pc, #392]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	4959      	ldr	r1, [pc, #356]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ec0:	4b54      	ldr	r3, [pc, #336]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ec6:	f023 0203 	bic.w	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	4951      	ldr	r1, [pc, #324]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	4948      	ldr	r1, [pc, #288]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d015      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f04:	4b43      	ldr	r3, [pc, #268]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	4940      	ldr	r1, [pc, #256]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f22:	d105      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f24:	4b3b      	ldr	r3, [pc, #236]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a3a      	ldr	r2, [pc, #232]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f2e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d015      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f3c:	4b35      	ldr	r3, [pc, #212]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4a:	4932      	ldr	r1, [pc, #200]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4a2c      	ldr	r2, [pc, #176]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f66:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d015      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f74:	4b27      	ldr	r3, [pc, #156]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f82:	4924      	ldr	r1, [pc, #144]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f92:	d105      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f94:	4b1f      	ldr	r3, [pc, #124]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a1e      	ldr	r2, [pc, #120]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d015      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fac:	4b19      	ldr	r3, [pc, #100]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fba:	4916      	ldr	r1, [pc, #88]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fca:	d105      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4a10      	ldr	r2, [pc, #64]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d019      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	4908      	ldr	r1, [pc, #32]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003002:	d109      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a02      	ldr	r2, [pc, #8]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800300e:	60d3      	str	r3, [r2, #12]
 8003010:	e002      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d015      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003024:	4b29      	ldr	r3, [pc, #164]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	4926      	ldr	r1, [pc, #152]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003042:	d105      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003044:	4b21      	ldr	r3, [pc, #132]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a20      	ldr	r2, [pc, #128]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d015      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800305c:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003062:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306a:	4918      	ldr	r1, [pc, #96]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800307a:	d105      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800307c:	4b13      	ldr	r3, [pc, #76]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4a12      	ldr	r2, [pc, #72]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003086:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d015      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003094:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003096:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800309a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a2:	490a      	ldr	r1, [pc, #40]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030b2:	d105      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b4:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a04      	ldr	r2, [pc, #16]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80030c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000

080030d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e049      	b.n	8003176 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd fd58 	bl	8000bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f000 fb3c 	bl	800378c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d001      	beq.n	8003198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e054      	b.n	8003242 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a26      	ldr	r2, [pc, #152]	@ (8003250 <HAL_TIM_Base_Start_IT+0xd0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d022      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x80>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c2:	d01d      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x80>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a22      	ldr	r2, [pc, #136]	@ (8003254 <HAL_TIM_Base_Start_IT+0xd4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d018      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x80>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a21      	ldr	r2, [pc, #132]	@ (8003258 <HAL_TIM_Base_Start_IT+0xd8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d013      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x80>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1f      	ldr	r2, [pc, #124]	@ (800325c <HAL_TIM_Base_Start_IT+0xdc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00e      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x80>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003260 <HAL_TIM_Base_Start_IT+0xe0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x80>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003264 <HAL_TIM_Base_Start_IT+0xe4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x80>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003268 <HAL_TIM_Base_Start_IT+0xe8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d115      	bne.n	800322c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	4b19      	ldr	r3, [pc, #100]	@ (800326c <HAL_TIM_Base_Start_IT+0xec>)
 8003208:	4013      	ands	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b06      	cmp	r3, #6
 8003210:	d015      	beq.n	800323e <HAL_TIM_Base_Start_IT+0xbe>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003218:	d011      	beq.n	800323e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322a:	e008      	b.n	800323e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e000      	b.n	8003240 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	40013400 	.word	0x40013400
 8003264:	40014000 	.word	0x40014000
 8003268:	40015000 	.word	0x40015000
 800326c:	00010007 	.word	0x00010007

08003270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d020      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01b      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0202 	mvn.w	r2, #2
 80032a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fa48 	bl	8003750 <HAL_TIM_IC_CaptureCallback>
 80032c0:	e005      	b.n	80032ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fa3a 	bl	800373c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 fa4b 	bl	8003764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d020      	beq.n	8003320 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01b      	beq.n	8003320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0204 	mvn.w	r2, #4
 80032f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fa22 	bl	8003750 <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fa14 	bl	800373c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fa25 	bl	8003764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d020      	beq.n	800336c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0208 	mvn.w	r2, #8
 800333c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2204      	movs	r2, #4
 8003342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f9fc 	bl	8003750 <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f9ee 	bl	800373c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f9ff 	bl	8003764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	d020      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01b      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0210 	mvn.w	r2, #16
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2208      	movs	r2, #8
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f9d6 	bl	8003750 <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f9c8 	bl	800373c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f9d9 	bl	8003764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00c      	beq.n	80033dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0201 	mvn.w	r2, #1
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd f926 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d104      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00c      	beq.n	800340a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fbb1 	bl	8003b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00c      	beq.n	800342e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fba9 	bl	8003b80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00c      	beq.n	8003452 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800344a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f993 	bl	8003778 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00c      	beq.n	8003476 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f06f 0220 	mvn.w	r2, #32
 800346e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fb71 	bl	8003b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00c      	beq.n	800349a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fb7d 	bl	8003b94 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00c      	beq.n	80034be <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80034b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fb75 	bl	8003ba8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00c      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80034da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fb6d 	bl	8003bbc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00c      	beq.n	8003506 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80034fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fb65 	bl	8003bd0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_TIM_ConfigClockSource+0x1c>
 8003528:	2302      	movs	r3, #2
 800352a:	e0f6      	b.n	800371a <HAL_TIM_ConfigClockSource+0x20a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800354a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800354e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6f      	ldr	r2, [pc, #444]	@ (8003724 <HAL_TIM_ConfigClockSource+0x214>)
 8003566:	4293      	cmp	r3, r2
 8003568:	f000 80c1 	beq.w	80036ee <HAL_TIM_ConfigClockSource+0x1de>
 800356c:	4a6d      	ldr	r2, [pc, #436]	@ (8003724 <HAL_TIM_ConfigClockSource+0x214>)
 800356e:	4293      	cmp	r3, r2
 8003570:	f200 80c6 	bhi.w	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 8003574:	4a6c      	ldr	r2, [pc, #432]	@ (8003728 <HAL_TIM_ConfigClockSource+0x218>)
 8003576:	4293      	cmp	r3, r2
 8003578:	f000 80b9 	beq.w	80036ee <HAL_TIM_ConfigClockSource+0x1de>
 800357c:	4a6a      	ldr	r2, [pc, #424]	@ (8003728 <HAL_TIM_ConfigClockSource+0x218>)
 800357e:	4293      	cmp	r3, r2
 8003580:	f200 80be 	bhi.w	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 8003584:	4a69      	ldr	r2, [pc, #420]	@ (800372c <HAL_TIM_ConfigClockSource+0x21c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	f000 80b1 	beq.w	80036ee <HAL_TIM_ConfigClockSource+0x1de>
 800358c:	4a67      	ldr	r2, [pc, #412]	@ (800372c <HAL_TIM_ConfigClockSource+0x21c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	f200 80b6 	bhi.w	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 8003594:	4a66      	ldr	r2, [pc, #408]	@ (8003730 <HAL_TIM_ConfigClockSource+0x220>)
 8003596:	4293      	cmp	r3, r2
 8003598:	f000 80a9 	beq.w	80036ee <HAL_TIM_ConfigClockSource+0x1de>
 800359c:	4a64      	ldr	r2, [pc, #400]	@ (8003730 <HAL_TIM_ConfigClockSource+0x220>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	f200 80ae 	bhi.w	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 80035a4:	4a63      	ldr	r2, [pc, #396]	@ (8003734 <HAL_TIM_ConfigClockSource+0x224>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	f000 80a1 	beq.w	80036ee <HAL_TIM_ConfigClockSource+0x1de>
 80035ac:	4a61      	ldr	r2, [pc, #388]	@ (8003734 <HAL_TIM_ConfigClockSource+0x224>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	f200 80a6 	bhi.w	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 80035b4:	4a60      	ldr	r2, [pc, #384]	@ (8003738 <HAL_TIM_ConfigClockSource+0x228>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	f000 8099 	beq.w	80036ee <HAL_TIM_ConfigClockSource+0x1de>
 80035bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003738 <HAL_TIM_ConfigClockSource+0x228>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	f200 809e 	bhi.w	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 80035c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80035c8:	f000 8091 	beq.w	80036ee <HAL_TIM_ConfigClockSource+0x1de>
 80035cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80035d0:	f200 8096 	bhi.w	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 80035d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035d8:	f000 8089 	beq.w	80036ee <HAL_TIM_ConfigClockSource+0x1de>
 80035dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035e0:	f200 808e 	bhi.w	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 80035e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e8:	d03e      	beq.n	8003668 <HAL_TIM_ConfigClockSource+0x158>
 80035ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ee:	f200 8087 	bhi.w	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 80035f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f6:	f000 8086 	beq.w	8003706 <HAL_TIM_ConfigClockSource+0x1f6>
 80035fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fe:	d87f      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 8003600:	2b70      	cmp	r3, #112	@ 0x70
 8003602:	d01a      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x12a>
 8003604:	2b70      	cmp	r3, #112	@ 0x70
 8003606:	d87b      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 8003608:	2b60      	cmp	r3, #96	@ 0x60
 800360a:	d050      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x19e>
 800360c:	2b60      	cmp	r3, #96	@ 0x60
 800360e:	d877      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 8003610:	2b50      	cmp	r3, #80	@ 0x50
 8003612:	d03c      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x17e>
 8003614:	2b50      	cmp	r3, #80	@ 0x50
 8003616:	d873      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 8003618:	2b40      	cmp	r3, #64	@ 0x40
 800361a:	d058      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0x1be>
 800361c:	2b40      	cmp	r3, #64	@ 0x40
 800361e:	d86f      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 8003620:	2b30      	cmp	r3, #48	@ 0x30
 8003622:	d064      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x1de>
 8003624:	2b30      	cmp	r3, #48	@ 0x30
 8003626:	d86b      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 8003628:	2b20      	cmp	r3, #32
 800362a:	d060      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x1de>
 800362c:	2b20      	cmp	r3, #32
 800362e:	d867      	bhi.n	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d05c      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x1de>
 8003634:	2b10      	cmp	r3, #16
 8003636:	d05a      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x1de>
 8003638:	e062      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800364a:	f000 f9cf 	bl	80039ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800365c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	609a      	str	r2, [r3, #8]
      break;
 8003666:	e04f      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003678:	f000 f9b8 	bl	80039ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800368a:	609a      	str	r2, [r3, #8]
      break;
 800368c:	e03c      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369a:	461a      	mov	r2, r3
 800369c:	f000 f92a 	bl	80038f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2150      	movs	r1, #80	@ 0x50
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f983 	bl	80039b2 <TIM_ITRx_SetConfig>
      break;
 80036ac:	e02c      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ba:	461a      	mov	r2, r3
 80036bc:	f000 f949 	bl	8003952 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2160      	movs	r1, #96	@ 0x60
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f973 	bl	80039b2 <TIM_ITRx_SetConfig>
      break;
 80036cc:	e01c      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036da:	461a      	mov	r2, r3
 80036dc:	f000 f90a 	bl	80038f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2140      	movs	r1, #64	@ 0x40
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f963 	bl	80039b2 <TIM_ITRx_SetConfig>
      break;
 80036ec:	e00c      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4619      	mov	r1, r3
 80036f8:	4610      	mov	r0, r2
 80036fa:	f000 f95a 	bl	80039b2 <TIM_ITRx_SetConfig>
      break;
 80036fe:	e003      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
      break;
 8003704:	e000      	b.n	8003708 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	00100070 	.word	0x00100070
 8003728:	00100060 	.word	0x00100060
 800372c:	00100050 	.word	0x00100050
 8003730:	00100040 	.word	0x00100040
 8003734:	00100030 	.word	0x00100030
 8003738:	00100020 	.word	0x00100020

0800373c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a4c      	ldr	r2, [pc, #304]	@ (80038d0 <TIM_Base_SetConfig+0x144>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d017      	beq.n	80037d4 <TIM_Base_SetConfig+0x48>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037aa:	d013      	beq.n	80037d4 <TIM_Base_SetConfig+0x48>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a49      	ldr	r2, [pc, #292]	@ (80038d4 <TIM_Base_SetConfig+0x148>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00f      	beq.n	80037d4 <TIM_Base_SetConfig+0x48>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a48      	ldr	r2, [pc, #288]	@ (80038d8 <TIM_Base_SetConfig+0x14c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00b      	beq.n	80037d4 <TIM_Base_SetConfig+0x48>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a47      	ldr	r2, [pc, #284]	@ (80038dc <TIM_Base_SetConfig+0x150>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d007      	beq.n	80037d4 <TIM_Base_SetConfig+0x48>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a46      	ldr	r2, [pc, #280]	@ (80038e0 <TIM_Base_SetConfig+0x154>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d003      	beq.n	80037d4 <TIM_Base_SetConfig+0x48>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a45      	ldr	r2, [pc, #276]	@ (80038e4 <TIM_Base_SetConfig+0x158>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d108      	bne.n	80037e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a39      	ldr	r2, [pc, #228]	@ (80038d0 <TIM_Base_SetConfig+0x144>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d023      	beq.n	8003836 <TIM_Base_SetConfig+0xaa>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f4:	d01f      	beq.n	8003836 <TIM_Base_SetConfig+0xaa>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a36      	ldr	r2, [pc, #216]	@ (80038d4 <TIM_Base_SetConfig+0x148>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01b      	beq.n	8003836 <TIM_Base_SetConfig+0xaa>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a35      	ldr	r2, [pc, #212]	@ (80038d8 <TIM_Base_SetConfig+0x14c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d017      	beq.n	8003836 <TIM_Base_SetConfig+0xaa>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a34      	ldr	r2, [pc, #208]	@ (80038dc <TIM_Base_SetConfig+0x150>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <TIM_Base_SetConfig+0xaa>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a33      	ldr	r2, [pc, #204]	@ (80038e0 <TIM_Base_SetConfig+0x154>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00f      	beq.n	8003836 <TIM_Base_SetConfig+0xaa>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a33      	ldr	r2, [pc, #204]	@ (80038e8 <TIM_Base_SetConfig+0x15c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00b      	beq.n	8003836 <TIM_Base_SetConfig+0xaa>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a32      	ldr	r2, [pc, #200]	@ (80038ec <TIM_Base_SetConfig+0x160>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d007      	beq.n	8003836 <TIM_Base_SetConfig+0xaa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a31      	ldr	r2, [pc, #196]	@ (80038f0 <TIM_Base_SetConfig+0x164>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d003      	beq.n	8003836 <TIM_Base_SetConfig+0xaa>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2c      	ldr	r2, [pc, #176]	@ (80038e4 <TIM_Base_SetConfig+0x158>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d108      	bne.n	8003848 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800383c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a18      	ldr	r2, [pc, #96]	@ (80038d0 <TIM_Base_SetConfig+0x144>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <TIM_Base_SetConfig+0x110>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a1a      	ldr	r2, [pc, #104]	@ (80038e0 <TIM_Base_SetConfig+0x154>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00f      	beq.n	800389c <TIM_Base_SetConfig+0x110>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a1a      	ldr	r2, [pc, #104]	@ (80038e8 <TIM_Base_SetConfig+0x15c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00b      	beq.n	800389c <TIM_Base_SetConfig+0x110>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a19      	ldr	r2, [pc, #100]	@ (80038ec <TIM_Base_SetConfig+0x160>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d007      	beq.n	800389c <TIM_Base_SetConfig+0x110>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a18      	ldr	r2, [pc, #96]	@ (80038f0 <TIM_Base_SetConfig+0x164>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d003      	beq.n	800389c <TIM_Base_SetConfig+0x110>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a13      	ldr	r2, [pc, #76]	@ (80038e4 <TIM_Base_SetConfig+0x158>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d103      	bne.n	80038a4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d105      	bne.n	80038c2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f023 0201 	bic.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	611a      	str	r2, [r3, #16]
  }
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40013400 	.word	0x40013400
 80038e4:	40015000 	.word	0x40015000
 80038e8:	40014000 	.word	0x40014000
 80038ec:	40014400 	.word	0x40014400
 80038f0:	40014800 	.word	0x40014800

080038f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f023 0201 	bic.w	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800391e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f023 030a 	bic.w	r3, r3, #10
 8003930:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003952:	b480      	push	{r7}
 8003954:	b087      	sub	sp, #28
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	f023 0210 	bic.w	r2, r3, #16
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800397c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	031b      	lsls	r3, r3, #12
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800398e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80039c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f043 0307 	orr.w	r3, r3, #7
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	021a      	lsls	r2, r3, #8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	609a      	str	r2, [r3, #8]
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e074      	b.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a34      	ldr	r2, [pc, #208]	@ (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a33      	ldr	r2, [pc, #204]	@ (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a31      	ldr	r2, [pc, #196]	@ (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d108      	bne.n	8003a94 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a21      	ldr	r2, [pc, #132]	@ (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d022      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac4:	d01d      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d018      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1c      	ldr	r2, [pc, #112]	@ (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00e      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a15      	ldr	r2, [pc, #84]	@ (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d009      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a18      	ldr	r2, [pc, #96]	@ (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d004      	beq.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a11      	ldr	r2, [pc, #68]	@ (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d10c      	bne.n	8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	40013400 	.word	0x40013400
 8003b44:	40015000 	.word	0x40015000
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	40014000 	.word	0x40014000

08003b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_uavcan_equipment_power_BatteryInfo_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_equipment_power_BatteryInfo_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_equipment_power_BatteryInfo* msg, bool tao);
static inline bool _uavcan_equipment_power_BatteryInfo_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_power_BatteryInfo* msg, bool tao);
void _uavcan_equipment_power_BatteryInfo_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_equipment_power_BatteryInfo* msg, bool tao) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	@ 0x28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	70fb      	strb	r3, [r7, #3]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->temperature);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfc:	f001 f9f2 	bl	8004fe4 <canardConvertNativeFloatToFloat16>
 8003c00:	4603      	mov	r3, r0
 8003c02:	843b      	strh	r3, [r7, #32]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	6819      	ldr	r1, [r3, #0]
 8003c08:	f107 0320 	add.w	r3, r7, #32
 8003c0c:	2210      	movs	r2, #16
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f001 f940 	bl	8004e94 <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f103 0210 	add.w	r2, r3, #16
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->voltage);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c26:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2a:	f001 f9db 	bl	8004fe4 <canardConvertNativeFloatToFloat16>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	83fb      	strh	r3, [r7, #30]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6819      	ldr	r1, [r3, #0]
 8003c36:	f107 031e 	add.w	r3, r7, #30
 8003c3a:	2210      	movs	r2, #16
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f001 f929 	bl	8004e94 <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f103 0210 	add.w	r2, r3, #16
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->current);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c54:	eeb0 0a67 	vmov.f32	s0, s15
 8003c58:	f001 f9c4 	bl	8004fe4 <canardConvertNativeFloatToFloat16>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	83bb      	strh	r3, [r7, #28]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	6819      	ldr	r1, [r3, #0]
 8003c64:	f107 031c 	add.w	r3, r7, #28
 8003c68:	2210      	movs	r2, #16
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f001 f912 	bl	8004e94 <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f103 0210 	add.w	r2, r3, #16
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->average_power_10sec);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c82:	eeb0 0a67 	vmov.f32	s0, s15
 8003c86:	f001 f9ad 	bl	8004fe4 <canardConvertNativeFloatToFloat16>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	837b      	strh	r3, [r7, #26]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	f107 031a 	add.w	r3, r7, #26
 8003c96:	2210      	movs	r2, #16
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f001 f8fb 	bl	8004e94 <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f103 0210 	add.w	r2, r3, #16
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->remaining_capacity_wh);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	edd3 7a04 	vldr	s15, [r3, #16]
 8003cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb4:	f001 f996 	bl	8004fe4 <canardConvertNativeFloatToFloat16>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	833b      	strh	r3, [r7, #24]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	6819      	ldr	r1, [r3, #0]
 8003cc0:	f107 0318 	add.w	r3, r7, #24
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f001 f8e4 	bl	8004e94 <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f103 0210 	add.w	r2, r3, #16
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->full_charge_capacity_wh);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	edd3 7a05 	vldr	s15, [r3, #20]
 8003cde:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce2:	f001 f97f 	bl	8004fe4 <canardConvertNativeFloatToFloat16>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	82fb      	strh	r3, [r7, #22]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6819      	ldr	r1, [r3, #0]
 8003cee:	f107 0316 	add.w	r3, r7, #22
 8003cf2:	2210      	movs	r2, #16
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f001 f8cd 	bl	8004e94 <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f103 0210 	add.w	r2, r3, #16
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->hours_to_full_charge);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d10:	f001 f968 	bl	8004fe4 <canardConvertNativeFloatToFloat16>
 8003d14:	4603      	mov	r3, r0
 8003d16:	82bb      	strh	r3, [r7, #20]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6819      	ldr	r1, [r3, #0]
 8003d1c:	f107 0314 	add.w	r3, r7, #20
 8003d20:	2210      	movs	r2, #16
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f001 f8b6 	bl	8004e94 <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f103 0210 	add.w	r2, r3, #16
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 11, &msg->status_flags);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	331c      	adds	r3, #28
 8003d3c:	220b      	movs	r2, #11
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f001 f8a8 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 11;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f103 020b 	add.w	r2, r3, #11
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 7, &msg->state_of_health_pct);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	331e      	adds	r3, #30
 8003d58:	2207      	movs	r2, #7
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f001 f89a 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 7;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	1dda      	adds	r2, r3, #7
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 7, &msg->state_of_charge_pct);
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6819      	ldr	r1, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	331f      	adds	r3, #31
 8003d72:	2207      	movs	r2, #7
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f001 f88d 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 7;
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	1dda      	adds	r2, r3, #7
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 7, &msg->state_of_charge_pct_stdev);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	6819      	ldr	r1, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3320      	adds	r3, #32
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f001 f880 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 7;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	1dda      	adds	r2, r3, #7
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->battery_id);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6819      	ldr	r1, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3321      	adds	r3, #33	@ 0x21
 8003da6:	2208      	movs	r2, #8
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f001 f873 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 8;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f103 0208 	add.w	r2, r3, #8
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->model_instance_id);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3324      	adds	r3, #36	@ 0x24
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f001 f865 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 32;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f103 0220 	add.w	r2, r3, #32
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	601a      	str	r2, [r3, #0]



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const uint8_t model_name_len = msg->model_name.len > 31 ? 31 : msg->model_name.len;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ddc:	2b1f      	cmp	r3, #31
 8003dde:	bf28      	it	cs
 8003de0:	231f      	movcs	r3, #31
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#pragma GCC diagnostic pop

    if (!tao) {
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	f083 0301 	eor.w	r3, r3, #1
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00c      	beq.n	8003e0e <_uavcan_equipment_power_BatteryInfo_encode+0x22a>


        canardEncodeScalar(buffer, *bit_ofs, 5, &model_name_len);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	6819      	ldr	r1, [r3, #0]
 8003df8:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8003dfc:	2205      	movs	r2, #5
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f001 f848 	bl	8004e94 <canardEncodeScalar>
        *bit_ofs += 5;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	1d5a      	adds	r2, r3, #5
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	601a      	str	r2, [r3, #0]


    }

    for (size_t i=0; i < model_name_len; i++) {
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e12:	e013      	b.n	8003e3c <_uavcan_equipment_power_BatteryInfo_encode+0x258>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->model_name.data[i]);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6819      	ldr	r1, [r3, #0]
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	3328      	adds	r3, #40	@ 0x28
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	4413      	add	r3, r2
 8003e20:	3301      	adds	r3, #1
 8003e22:	2208      	movs	r2, #8
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f001 f835 	bl	8004e94 <canardEncodeScalar>

        *bit_ofs += 8;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f103 0208 	add.w	r2, r3, #8
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < model_name_len; i++) {
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	3301      	adds	r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e40:	461a      	mov	r2, r3
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d3e5      	bcc.n	8003e14 <_uavcan_equipment_power_BatteryInfo_encode+0x230>





}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	3728      	adds	r7, #40	@ 0x28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <uavcan_equipment_power_BatteryInfo_encode>:

uint32_t uavcan_equipment_power_BatteryInfo_encode(struct uavcan_equipment_power_BatteryInfo* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_EQUIPMENT_POWER_BATTERYINFO_MAX_SIZE);
 8003e60:	2237      	movs	r2, #55	@ 0x37
 8003e62:	2100      	movs	r1, #0
 8003e64:	6838      	ldr	r0, [r7, #0]
 8003e66:	f001 ff81 	bl	8005d6c <memset>
    _uavcan_equipment_power_BatteryInfo_encode(buffer, &bit_ofs, msg, 
 8003e6a:	f107 010c 	add.w	r1, r7, #12
 8003e6e:	2301      	movs	r3, #1
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6838      	ldr	r0, [r7, #0]
 8003e74:	f7ff feb6 	bl	8003be4 <_uavcan_equipment_power_BatteryInfo_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3307      	adds	r3, #7
 8003e7c:	08db      	lsrs	r3, r3, #3
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <_uavcan_protocol_HardwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_HardwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao) {
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b088      	sub	sp, #32
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	6819      	ldr	r1, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2208      	movs	r2, #8
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fff9 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 8;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f103 0208 	add.w	r2, r3, #8
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 ffeb 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 8;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f103 0208 	add.w	r2, r3, #8
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	601a      	str	r2, [r3, #0]





    for (size_t i=0; i < 16; i++) {
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	e012      	b.n	8003ef6 <_uavcan_protocol_HardwareVersion_encode+0x70>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id[i]);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	6819      	ldr	r1, [r3, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	3302      	adds	r3, #2
 8003edc:	2208      	movs	r2, #8
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 ffd8 	bl	8004e94 <canardEncodeScalar>

        *bit_ofs += 8;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f103 0208 	add.w	r2, r3, #8
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < 16; i++) {
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2b0f      	cmp	r3, #15
 8003efa:	d9e9      	bls.n	8003ed0 <_uavcan_protocol_HardwareVersion_encode+0x4a>



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const uint8_t certificate_of_authenticity_len = msg->certificate_of_authenticity.len > 255 ? 255 : msg->certificate_of_authenticity.len;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	7c9b      	ldrb	r3, [r3, #18]
 8003f00:	75fb      	strb	r3, [r7, #23]
#pragma GCC diagnostic pop

    if (!tao) {
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	f083 0301 	eor.w	r3, r3, #1
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00d      	beq.n	8003f2a <_uavcan_protocol_HardwareVersion_encode+0xa4>


        canardEncodeScalar(buffer, *bit_ofs, 8, &certificate_of_authenticity_len);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	6819      	ldr	r1, [r3, #0]
 8003f12:	f107 0317 	add.w	r3, r7, #23
 8003f16:	2208      	movs	r2, #8
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 ffbb 	bl	8004e94 <canardEncodeScalar>
        *bit_ofs += 8;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f103 0208 	add.w	r2, r3, #8
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	601a      	str	r2, [r3, #0]


    }

    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	e013      	b.n	8003f58 <_uavcan_protocol_HardwareVersion_encode+0xd2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.data[i]);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	6819      	ldr	r1, [r3, #0]
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	3310      	adds	r3, #16
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3303      	adds	r3, #3
 8003f3e:	2208      	movs	r2, #8
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 ffa7 	bl	8004e94 <canardEncodeScalar>

        *bit_ofs += 8;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f103 0208 	add.w	r2, r3, #8
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	3301      	adds	r3, #1
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d3e6      	bcc.n	8003f30 <_uavcan_protocol_HardwareVersion_encode+0xaa>





}
 8003f62:	bf00      	nop
 8003f64:	bf00      	nop
 8003f66:	3720      	adds	r7, #32
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 ff86 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 32;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f103 0220 	add.w	r2, r3, #32
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6819      	ldr	r1, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 ff78 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 2;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1c9a      	adds	r2, r3, #2
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6819      	ldr	r1, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3305      	adds	r3, #5
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 ff6b 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 3;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	1cda      	adds	r2, r3, #3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6819      	ldr	r1, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3306      	adds	r3, #6
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 ff5e 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 3;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	1cda      	adds	r2, r3, #3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	6819      	ldr	r1, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	2210      	movs	r2, #16
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 ff51 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 16;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f103 0210 	add.w	r2, r3, #16
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	601a      	str	r2, [r3, #0]





}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <_uavcan_protocol_SoftwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_SoftwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao) {
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6819      	ldr	r1, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2208      	movs	r2, #8
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 ff39 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 8;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f103 0208 	add.w	r2, r3, #8
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6819      	ldr	r1, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3301      	adds	r3, #1
 8004036:	2208      	movs	r2, #8
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 ff2b 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 8;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f103 0208 	add.w	r2, r3, #8
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->optional_field_flags);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6819      	ldr	r1, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3302      	adds	r3, #2
 8004052:	2208      	movs	r2, #8
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 ff1d 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 8;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f103 0208 	add.w	r2, r3, #8
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->vcs_commit);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6819      	ldr	r1, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3304      	adds	r3, #4
 800406e:	2220      	movs	r2, #32
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 ff0f 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 32;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f103 0220 	add.w	r2, r3, #32
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 64, &msg->image_crc);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6819      	ldr	r1, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3308      	adds	r3, #8
 800408a:	2240      	movs	r2, #64	@ 0x40
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 ff01 	bl	8004e94 <canardEncodeScalar>

    *bit_ofs += 64;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	601a      	str	r2, [r3, #0]





}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <_uavcan_protocol_GetNodeInfoResponse_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
static inline bool _uavcan_protocol_GetNodeInfoResponse_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao) {
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b086      	sub	sp, #24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	70fb      	strb	r3, [r7, #3]





    _uavcan_protocol_NodeStatus_encode(buffer, bit_ofs, &msg->status, false);
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	2300      	movs	r3, #0
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7ff ff56 	bl	8003f6c <_uavcan_protocol_NodeStatus_encode>





    _uavcan_protocol_SoftwareVersion_encode(buffer, bit_ofs, &msg->software_version, false);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f103 0210 	add.w	r2, r3, #16
 80040c6:	2300      	movs	r3, #0
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f7ff ff9b 	bl	8004006 <_uavcan_protocol_SoftwareVersion_encode>





    _uavcan_protocol_HardwareVersion_encode(buffer, bit_ofs, &msg->hardware_version, false);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f103 0220 	add.w	r2, r3, #32
 80040d6:	2300      	movs	r3, #0
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff fed3 	bl	8003e86 <_uavcan_protocol_HardwareVersion_encode>



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const uint8_t name_len = msg->name.len > 80 ? 80 : msg->name.len;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80040e6:	2b50      	cmp	r3, #80	@ 0x50
 80040e8:	bf28      	it	cs
 80040ea:	2350      	movcs	r3, #80	@ 0x50
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	74fb      	strb	r3, [r7, #19]
#pragma GCC diagnostic pop

    if (!tao) {
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	f083 0301 	eor.w	r3, r3, #1
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00c      	beq.n	8004116 <_uavcan_protocol_GetNodeInfoResponse_encode+0x70>


        canardEncodeScalar(buffer, *bit_ofs, 7, &name_len);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	f107 0313 	add.w	r3, r7, #19
 8004104:	2207      	movs	r2, #7
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fec4 	bl	8004e94 <canardEncodeScalar>
        *bit_ofs += 7;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	1dda      	adds	r2, r3, #7
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	601a      	str	r2, [r3, #0]


    }

    for (size_t i=0; i < name_len; i++) {
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	e014      	b.n	8004146 <_uavcan_protocol_GetNodeInfoResponse_encode+0xa0>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->name.data[i]);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	3303      	adds	r3, #3
 800412c:	2208      	movs	r2, #8
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 feb0 	bl	8004e94 <canardEncodeScalar>

        *bit_ofs += 8;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f103 0208 	add.w	r2, r3, #8
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < name_len; i++) {
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	3301      	adds	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	7cfb      	ldrb	r3, [r7, #19]
 8004148:	461a      	mov	r2, r3
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	4293      	cmp	r3, r2
 800414e:	d3e5      	bcc.n	800411c <_uavcan_protocol_GetNodeInfoResponse_encode+0x76>





}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <uavcan_protocol_GetNodeInfoResponse_encode>:

uint32_t uavcan_protocol_GetNodeInfoResponse_encode(struct uavcan_protocol_GetNodeInfoResponse* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE);
 8004168:	f240 1279 	movw	r2, #377	@ 0x179
 800416c:	2100      	movs	r1, #0
 800416e:	6838      	ldr	r0, [r7, #0]
 8004170:	f001 fdfc 	bl	8005d6c <memset>
    _uavcan_protocol_GetNodeInfoResponse_encode(buffer, &bit_ofs, msg, 
 8004174:	f107 010c 	add.w	r1, r7, #12
 8004178:	2301      	movs	r3, #1
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6838      	ldr	r0, [r7, #0]
 800417e:	f7ff ff92 	bl	80040a6 <_uavcan_protocol_GetNodeInfoResponse_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3307      	adds	r3, #7
 8004186:	08db      	lsrs	r3, r3, #3
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_uavcan_protocol_NodeStatus_encode>:
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	70fb      	strb	r3, [r7, #3]
    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	6819      	ldr	r1, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fe74 	bl	8004e94 <canardEncodeScalar>
    *bit_ofs += 32;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f103 0220 	add.w	r2, r3, #32
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	6819      	ldr	r1, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3304      	adds	r3, #4
 80041c0:	2202      	movs	r2, #2
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fe66 	bl	8004e94 <canardEncodeScalar>
    *bit_ofs += 2;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	1c9a      	adds	r2, r3, #2
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	6819      	ldr	r1, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3305      	adds	r3, #5
 80041da:	2203      	movs	r2, #3
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fe59 	bl	8004e94 <canardEncodeScalar>
    *bit_ofs += 3;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	1cda      	adds	r2, r3, #3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3306      	adds	r3, #6
 80041f4:	2203      	movs	r2, #3
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fe4c 	bl	8004e94 <canardEncodeScalar>
    *bit_ofs += 3;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	1cda      	adds	r2, r3, #3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6819      	ldr	r1, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3308      	adds	r3, #8
 800420e:	2210      	movs	r2, #16
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 fe3f 	bl	8004e94 <canardEncodeScalar>
    *bit_ofs += 16;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f103 0210 	add.w	r2, r3, #16
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	601a      	str	r2, [r3, #0]
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 8004238:	2207      	movs	r2, #7
 800423a:	2100      	movs	r1, #0
 800423c:	6838      	ldr	r0, [r7, #0]
 800423e:	f001 fd95 	bl	8005d6c <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 8004242:	f107 010c 	add.w	r1, r7, #12
 8004246:	2301      	movs	r3, #1
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6838      	ldr	r0, [r7, #0]
 800424c:	f7ff ffa0 	bl	8004190 <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3307      	adds	r3, #7
 8004254:	08db      	lsrs	r3, r3, #3
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 800426c:	222c      	movs	r2, #44	@ 0x2c
 800426e:	2100      	movs	r1, #0
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f001 fd7b 	bl	8005d6c <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a3a      	ldr	r2, [r7, #32]
 8004286:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004298:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a6:	d302      	bcc.n	80042ae <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 80042a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80042ac:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	330c      	adds	r3, #12
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	b292      	uxth	r2, r2
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 fcdd 	bl	8005c78 <initPoolAllocator>
}
 80042be:	bf00      	nop
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <canardSetLocalNodeID+0x28>
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d006      	beq.n	80042ee <canardSetLocalNodeID+0x28>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 80042e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	db02      	blt.n	80042ee <canardSetLocalNodeID+0x28>
    {
        ins->node_id = self_node_id;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	781b      	ldrb	r3, [r3, #0]
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <canardBroadcast>:
#endif
#if CANARD_ENABLE_CANFD
                        ,bool canfd
#endif
)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b08e      	sub	sp, #56	@ 0x38
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	e9c7 2300 	strd	r2, r3, [r7]
    // create transfer object
    CanardTxTransfer transfer_object = {
 800431e:	f107 0310 	add.w	r3, r7, #16
 8004322:	2228      	movs	r2, #40	@ 0x28
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f001 fd20 	bl	8005d6c <memset>
 800432c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004330:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8004334:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004338:	843b      	strh	r3, [r7, #32]
 800433a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
 800433e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8004342:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8004346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800434a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800434e:	863b      	strh	r3, [r7, #48]	@ 0x30
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };

    return canardBroadcastObj(ins, &transfer_object);
 8004350:	f107 0310 	add.w	r3, r7, #16
 8004354:	4619      	mov	r1, r3
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f806 	bl	8004368 <canardBroadcastObj>
 800435c:	4603      	mov	r3, r0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3738      	adds	r7, #56	@ 0x38
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <canardBroadcastObj>:

int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
{
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <canardBroadcastObj+0x20>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	8c1b      	ldrh	r3, [r3, #32]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <canardBroadcastObj+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004382:	f06f 0301 	mvn.w	r3, #1
 8004386:	e070      	b.n	800446a <canardBroadcastObj+0x102>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	7e1b      	ldrb	r3, [r3, #24]
 800438c:	2b1f      	cmp	r3, #31
 800438e:	d902      	bls.n	8004396 <canardBroadcastObj+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8004390:	f06f 0301 	mvn.w	r3, #1
 8004394:	e069      	b.n	800446a <canardBroadcastObj+0x102>
    }

    uint32_t can_id = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0xFFFFU;
 800439a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800439e:	827b      	strh	r3, [r7, #18]

    if (canardGetLocalNodeID(ins) == 0)
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ffaa 	bl	80042fa <canardGetLocalNodeID>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d138      	bne.n	800441e <canardBroadcastObj+0xb6>
    {
        if (transfer_object->payload_len > 7)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	8c1b      	ldrh	r3, [r3, #32]
 80043b0:	2b07      	cmp	r3, #7
 80043b2:	d902      	bls.n	80043ba <canardBroadcastObj+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 80043b4:	f06f 0303 	mvn.w	r3, #3
 80043b8:	e057      	b.n	800446a <canardBroadcastObj+0x102>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	8a1a      	ldrh	r2, [r3, #16]
 80043be:	4b2d      	ldr	r3, [pc, #180]	@ (8004474 <canardBroadcastObj+0x10c>)
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	4013      	ands	r3, r2
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	8a1b      	ldrh	r3, [r3, #16]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d002      	beq.n	80043d4 <canardBroadcastObj+0x6c>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 80043ce:	f06f 0301 	mvn.w	r3, #1
 80043d2:	e04a      	b.n	800446a <canardBroadcastObj+0x102>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	69d9      	ldr	r1, [r3, #28]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	8c1b      	ldrh	r3, [r3, #32]
 80043dc:	461a      	mov	r2, r3
 80043de:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80043e2:	f001 fc2c 	bl	8005c3e <crcAdd>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 80043ee:	4013      	ands	r3, r2
 80043f0:	823b      	strh	r3, [r7, #16]
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	7e1b      	ldrb	r3, [r3, #24]
 80043f6:	061a      	lsls	r2, r3, #24
 80043f8:	8a3b      	ldrh	r3, [r7, #16]
 80043fa:	025b      	lsls	r3, r3, #9
 80043fc:	431a      	orrs	r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	8a19      	ldrh	r1, [r3, #16]
 8004402:	4b1c      	ldr	r3, [pc, #112]	@ (8004474 <canardBroadcastObj+0x10c>)
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	400b      	ands	r3, r1
 8004408:	b29b      	uxth	r3, r3
 800440a:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 800440c:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff72 	bl	80042fa <canardGetLocalNodeID>
 8004416:	4603      	mov	r3, r0
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8004418:	4323      	orrs	r3, r4
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	e012      	b.n	8004444 <canardBroadcastObj+0xdc>
    }
    else
    {
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	7e1b      	ldrb	r3, [r3, #24]
 8004422:	061a      	lsls	r2, r3, #24
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	8a1b      	ldrh	r3, [r3, #16]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	ea42 0403 	orr.w	r4, r2, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff ff63 	bl	80042fa <canardGetLocalNodeID>
 8004434:	4603      	mov	r3, r0
 8004436:	4323      	orrs	r3, r4
 8004438:	617b      	str	r3, [r7, #20]
        crc = calculateCRC(transfer_object);
 800443a:	6838      	ldr	r0, [r7, #0]
 800443c:	f000 f84c 	bl	80044d8 <calculateCRC>
 8004440:	4603      	mov	r3, r0
 8004442:	827b      	strh	r3, [r7, #18]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8004444:	8a7a      	ldrh	r2, [r7, #18]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6979      	ldr	r1, [r7, #20]
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 feb4 	bl	80051b8 <enqueueTxFrames>
 8004450:	4603      	mov	r3, r0
 8004452:	81fb      	strh	r3, [r7, #14]

    if (result > 0) {
 8004454:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004458:	2b00      	cmp	r3, #0
 800445a:	dd04      	ble.n	8004466 <canardBroadcastObj+0xfe>
        incrementTransferID(transfer_object->inout_transfer_id);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fe34 	bl	80050ce <incrementTransferID>
    }

    return result;
 8004466:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800446a:	4618      	mov	r0, r3
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	bd90      	pop	{r4, r7, pc}
 8004472:	bf00      	nop
 8004474:	08005e28 	.word	0x08005e28

08004478 <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 8004482:	683b      	ldr	r3, [r7, #0]
#endif
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 800449a:	683b      	ldr	r3, [r7, #0]
#endif
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 80044b2:	683b      	ldr	r3, [r7, #0]
#endif
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <canardRxToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)rx;
 80044ca:	683b      	ldr	r3, [r7, #0]
#endif
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <calculateCRC>:

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 80044e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044e4:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8c1b      	ldrh	r3, [r3, #32]
 80044ea:	2b07      	cmp	r3, #7
 80044ec:	d913      	bls.n	8004516 <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80044f4:	89f9      	ldrh	r1, [r7, #14]
 80044f6:	4608      	mov	r0, r1
 80044f8:	f001 fb72 	bl	8005be0 <crcAddSignature>
 80044fc:	4603      	mov	r3, r0
 80044fe:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69d9      	ldr	r1, [r3, #28]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8c1b      	ldrh	r3, [r3, #32]
 8004508:	461a      	mov	r2, r3
 800450a:	89fb      	ldrh	r3, [r7, #14]
 800450c:	4618      	mov	r0, r3
 800450e:	f001 fb96 	bl	8005c3e <crcAdd>
 8004512:	4603      	mov	r3, r0
 8004514:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 8004516:	89fb      	ldrh	r3, [r7, #14]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08e      	sub	sp, #56	@ 0x38
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	e9c7 2300 	strd	r2, r3, [r7]
 800452c:	460b      	mov	r3, r1
 800452e:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 8004530:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004534:	2b01      	cmp	r3, #1
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 800453e:	743b      	strb	r3, [r7, #16]
 8004540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004544:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8004548:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800454c:	b29b      	uxth	r3, r3
 800454e:	843b      	strh	r3, [r7, #32]
 8004550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004552:	627b      	str	r3, [r7, #36]	@ 0x24
 8004554:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8004558:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800455c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800455e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004560:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8004564:	863b      	strh	r3, [r7, #48]	@ 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 8004566:	f107 0210 	add.w	r2, r7, #16
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	4619      	mov	r1, r3
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f805 	bl	800457e <canardRequestOrRespondObj>
 8004574:	4603      	mov	r3, r0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3738      	adds	r7, #56	@ 0x38
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 800457e:	b590      	push	{r4, r7, lr}
 8004580:	b087      	sub	sp, #28
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	460b      	mov	r3, r1
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <canardRequestOrRespondObj+0x24>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	8c1b      	ldrh	r3, [r3, #32]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800459c:	f06f 0301 	mvn.w	r3, #1
 80045a0:	e042      	b.n	8004628 <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7e1b      	ldrb	r3, [r3, #24]
 80045a6:	2b1f      	cmp	r3, #31
 80045a8:	d902      	bls.n	80045b0 <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80045aa:	f06f 0301 	mvn.w	r3, #1
 80045ae:	e03b      	b.n	8004628 <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7ff fea2 	bl	80042fa <canardGetLocalNodeID>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 80045bc:	f06f 0303 	mvn.w	r3, #3
 80045c0:	e032      	b.n	8004628 <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7e1b      	ldrb	r3, [r3, #24]
 80045c6:	061a      	lsls	r2, r3, #24
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8a1b      	ldrh	r3, [r3, #16]
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 80045d6:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 80045d8:	7afb      	ldrb	r3, [r7, #11]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff fe8a 	bl	80042fa <canardGetLocalNodeID>
 80045e6:	4603      	mov	r3, r0
 80045e8:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 80045ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ee:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff71 	bl	80044d8 <calculateCRC>
 80045f6:	4603      	mov	r3, r0
 80045f8:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 80045fa:	8a7a      	ldrh	r2, [r7, #18]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6979      	ldr	r1, [r7, #20]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fdd9 	bl	80051b8 <enqueueTxFrames>
 8004606:	4603      	mov	r3, r0
 8004608:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 800460a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	dd08      	ble.n	8004624 <canardRequestOrRespondObj+0xa6>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d104      	bne.n	8004624 <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fd55 	bl	80050ce <incrementTransferID>
    }

    return result;
 8004624:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8004628:	4618      	mov	r0, r3
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	bd90      	pop	{r4, r7, pc}

08004630 <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <canardPeekTxQueue+0x14>
    {
        return NULL;
 8004640:	2300      	movs	r3, #0
 8004642:	e002      	b.n	800464a <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	3304      	adds	r3, #4
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	330c      	adds	r3, #12
 8004670:	68f9      	ldr	r1, [r7, #12]
 8004672:	4618      	mov	r0, r3
 8004674:	f001 fb60 	bl	8005d38 <freeBlock>
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8004680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004684:	b09f      	sub	sp, #124	@ 0x7c
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 ffb9 	bl	800560c <extractTransferType>
 800469a:	4603      	mov	r3, r0
 800469c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80046a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d007      	beq.n	80046b8 <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0a1b      	lsrs	r3, r3, #8
 80046ae:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80046b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	e000      	b.n	80046ba <canardHandleRxFrame+0x3a>
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da0f      	bge.n	80046e6 <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 80046e6:	f06f 0309 	mvn.w	r3, #9
 80046ea:	e361      	b.n	8004db0 <canardHandleRxFrame+0x730>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 80046ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d00b      	beq.n	800470c <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff fe00 	bl	80042fa <canardGetLocalNodeID>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 80046fe:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8004702:	4293      	cmp	r3, r2
 8004704:	d002      	beq.n	800470c <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 8004706:	f06f 030a 	mvn.w	r3, #10
 800470a:	e351      	b.n	8004db0 <canardHandleRxFrame+0x730>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	0e1b      	lsrs	r3, r3, #24
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004726:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f000 ff4c 	bl	80055cc <extractDataType>
 8004734:	4603      	mov	r3, r0
 8004736:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 800473a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 800473e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	431a      	orrs	r2, r3
 8004746:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800474a:	049b      	lsls	r3, r3, #18
 800474c:	431a      	orrs	r2, r3
 800474e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8004752:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8004754:	4313      	orrs	r3, r2
 8004756:	64fb      	str	r3, [r7, #76]	@ 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	7b1b      	ldrb	r3, [r3, #12]
 800475c:	3b01      	subs	r3, #1
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	4413      	add	r3, r2
 8004762:	791b      	ldrb	r3, [r3, #4]
 8004764:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    uint64_t data_type_signature = 0;
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    CanardRxState* rx_state = NULL;
 8004774:	2300      	movs	r3, #0
 8004776:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 8004778:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800477c:	09db      	lsrs	r3, r3, #7
 800477e:	b2db      	uxtb	r3, r3
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01e      	beq.n	80047c6 <canardHandleRxFrame+0x146>
    {

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685e      	ldr	r6, [r3, #4]
 800478c:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8004790:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8004794:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8004798:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	4603      	mov	r3, r0
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	47b0      	blx	r6
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <canardHandleRxFrame+0x140>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 80047aa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 ff51 	bl	8005654 <traverseRxStates>
 80047b2:	66f8      	str	r0, [r7, #108]	@ 0x6c

            if(rx_state == NULL)
 80047b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d110      	bne.n	80047dc <canardHandleRxFrame+0x15c>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 80047ba:	f06f 0302 	mvn.w	r3, #2
 80047be:	e2f7      	b.n	8004db0 <canardHandleRxFrame+0x730>
            }
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 80047c0:	f06f 030b 	mvn.w	r3, #11
 80047c4:	e2f4      	b.n	8004db0 <canardHandleRxFrame+0x730>
        }
    }
    else
    {
        rx_state = findRxState(ins, transfer_descriptor);
 80047c6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 ff72 	bl	80056b2 <findRxState>
 80047ce:	66f8      	str	r0, [r7, #108]	@ 0x6c

        if (rx_state == NULL)
 80047d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <canardHandleRxFrame+0x15c>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 80047d6:	f06f 030c 	mvn.w	r3, #12
 80047da:	e2e9      	b.n	8004db0 <canardHandleRxFrame+0x730>
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 80047dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	bf0c      	ite	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	2300      	movne	r3, #0
 80047ea:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 80047ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80047f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047f8:	ebb0 0802 	subs.w	r8, r0, r2
 80047fc:	eb61 0903 	sbc.w	r9, r1, r3
 8004800:	4ba9      	ldr	r3, [pc, #676]	@ (8004aa8 <canardHandleRxFrame+0x428>)
 8004802:	4598      	cmp	r8, r3
 8004804:	f179 0300 	sbcs.w	r3, r9, #0
 8004808:	bf2c      	ite	cs
 800480a:	2301      	movcs	r3, #1
 800480c:	2300      	movcc	r3, #0
 800480e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    const bool same_iface = frame->iface_id == rx_state->iface_id;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	7b5a      	ldrb	r2, [r3, #13]
 8004816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004818:	7e9b      	ldrb	r3, [r3, #26]
 800481a:	429a      	cmp	r2, r3
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 8004826:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800482a:	09db      	lsrs	r3, r3, #7
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf14      	ite	ne
 8004836:	2301      	movne	r3, #1
 8004838:	2300      	moveq	r3, #0
 800483a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 800483e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004840:	7ddb      	ldrb	r3, [r3, #23]
 8004842:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8004846:	b2db      	uxtb	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	b2db      	uxtb	r3, r3
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f000 fc1a 	bl	8005090 <computeTransferIDForwardDistance>
 800485c:	4603      	mov	r3, r0
    const bool not_previous_tid =
 800485e:	2b01      	cmp	r3, #1
 8004860:	bfcc      	ite	gt
 8004862:	2301      	movgt	r3, #1
 8004864:	2300      	movle	r3, #0
 8004866:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 800486a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800486c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004874:	1a84      	subs	r4, r0, r2
 8004876:	eb61 0503 	sbc.w	r5, r1, r3
 800487a:	4b8c      	ldr	r3, [pc, #560]	@ (8004aac <canardHandleRxFrame+0x42c>)
 800487c:	429c      	cmp	r4, r3
 800487e:	f175 0300 	sbcs.w	r3, r5, #0
 8004882:	bf2c      	ite	cs
 8004884:	2301      	movcs	r3, #1
 8004886:	2300      	movcc	r3, #0
 8004888:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 800488c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	b2da      	uxtb	r2, r3
 8004896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004898:	7ddb      	ldrb	r3, [r3, #23]
 800489a:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f000 fbf4 	bl	8005090 <computeTransferIDForwardDistance>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	bfd4      	ite	le
 80048ae:	2301      	movle	r3, #1
 80048b0:	2300      	movgt	r3, #0
 80048b2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 80048b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bf14      	ite	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	2300      	moveq	r3, #0
 80048c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 80048c6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d11f      	bne.n	800490e <canardHandleRxFrame+0x28e>
            (not_initialized) ||
 80048ce:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d11b      	bne.n	800490e <canardHandleRxFrame+0x28e>
            (tid_timed_out) ||
 80048d6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <canardHandleRxFrame+0x276>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 80048de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <canardHandleRxFrame+0x276>
 80048e6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10f      	bne.n	800490e <canardHandleRxFrame+0x28e>
 80048ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10b      	bne.n	800490e <canardHandleRxFrame+0x28e>
 80048f6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <canardHandleRxFrame+0x292>
            (iface_switch_allowed && first_frame && non_wrapped_tid);
 80048fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <canardHandleRxFrame+0x292>
 8004906:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <canardHandleRxFrame+0x292>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <canardHandleRxFrame+0x294>
 8004912:	2300      	movs	r3, #0
    const bool need_restart =
 8004914:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004918:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

    if (need_restart)
 8004924:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004928:	2b00      	cmp	r3, #0
 800492a:	d02f      	beq.n	800498c <canardHandleRxFrame+0x30c>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 800492c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	b2d9      	uxtb	r1, r3
 8004936:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004938:	7dd3      	ldrb	r3, [r2, #23]
 800493a:	f361 0386 	bfi	r3, r1, #2, #5
 800493e:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 8004940:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004942:	7dd3      	ldrb	r3, [r2, #23]
 8004944:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004948:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 800494a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 ff1a 	bl	8005786 <releaseStatePayload>
        rx_state->iface_id = frame->iface_id;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	7b5a      	ldrb	r2, [r3, #13]
 8004956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004958:	769a      	strb	r2, [r3, #26]
        if (!IS_START_OF_TRANSFER(tail_byte))
 800495a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800495e:	09db      	lsrs	r3, r3, #7
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d110      	bne.n	800498c <canardHandleRxFrame+0x30c>
        {
            rx_state->transfer_id++;
 800496a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800496c:	7ddb      	ldrb	r3, [r3, #23]
 800496e:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8004972:	b2db      	uxtb	r3, r3
 8004974:	3301      	adds	r3, #1
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	b2d9      	uxtb	r1, r3
 800497c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800497e:	7dd3      	ldrb	r3, [r2, #23]
 8004980:	f361 0386 	bfi	r3, r1, #2, #5
 8004984:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 8004986:	f06f 030c 	mvn.w	r3, #12
 800498a:	e211      	b.n	8004db0 <canardHandleRxFrame+0x730>
        }
    }

    if (frame->iface_id != rx_state->iface_id)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	7b5a      	ldrb	r2, [r3, #13]
 8004990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004992:	7e9b      	ldrb	r3, [r3, #26]
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <canardHandleRxFrame+0x31c>
    {
        // drop frame if coming from unexpected interface
        return CANARD_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e209      	b.n	8004db0 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 800499c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80049a0:	09db      	lsrs	r3, r3, #7
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d041      	beq.n	8004a30 <canardHandleRxFrame+0x3b0>
 80049ac:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80049b0:	099b      	lsrs	r3, r3, #6
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d039      	beq.n	8004a30 <canardHandleRxFrame+0x3b0>
    {
        rx_state->timestamp_usec = timestamp_usec;
 80049bc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80049be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        CanardRxTransfer rx_transfer = {
 80049c6:	f107 0310 	add.w	r3, r7, #16
 80049ca:	2220      	movs	r2, #32
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f001 f9cc 	bl	8005d6c <memset>
 80049d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 80049e0:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	7b1b      	ldrb	r3, [r3, #12]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 80049ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80049ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80049f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80049f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049f6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 80049fa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8004a04:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8004a08:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a10:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004a14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        ins->on_reception(ins, &rx_transfer);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f107 0210 	add.w	r2, r7, #16
 8004a20:	4611      	mov	r1, r2
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 8004a26:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004a28:	f000 fdae 	bl	8005588 <prepareForNextTransfer>
        return CANARD_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e1bf      	b.n	8004db0 <canardHandleRxFrame+0x730>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 8004a30:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bf14      	ite	ne
 8004a40:	2301      	movne	r3, #1
 8004a42:	2300      	moveq	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a4a:	7ddb      	ldrb	r3, [r3, #23]
 8004a4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d002      	beq.n	8004a5c <canardHandleRxFrame+0x3dc>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 8004a56:	f06f 030d 	mvn.w	r3, #13
 8004a5a:	e1a9      	b.n	8004db0 <canardHandleRxFrame+0x730>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 8004a5c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a66:	7dd2      	ldrb	r2, [r2, #23]
 8004a68:	f3c2 0284 	ubfx	r2, r2, #2, #5
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d002      	beq.n	8004a78 <canardHandleRxFrame+0x3f8>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 8004a72:	f06f 030e 	mvn.w	r3, #14
 8004a76:	e19b      	b.n	8004db0 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 8004a78:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004a7c:	09db      	lsrs	r3, r3, #7
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d061      	beq.n	8004b4c <canardHandleRxFrame+0x4cc>
 8004a88:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004a8c:	099b      	lsrs	r3, r3, #6
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d159      	bne.n	8004b4c <canardHandleRxFrame+0x4cc>
    {
        if (frame->data_len <= 3)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	7b1b      	ldrb	r3, [r3, #12]
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d807      	bhi.n	8004ab0 <canardHandleRxFrame+0x430>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 8004aa0:	f06f 030f 	mvn.w	r3, #15
 8004aa4:	e184      	b.n	8004db0 <canardHandleRxFrame+0x730>
 8004aa6:	bf00      	nop
 8004aa8:	001e8481 	.word	0x001e8481
 8004aac:	000f4241 	.word	0x000f4241
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 8004ab0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rx_state->payload_len = 0;
 8004aba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004abc:	8ad3      	ldrh	r3, [r2, #22]
 8004abe:	f36f 0309 	bfc	r3, #0, #10
 8004ac2:	82d3      	strh	r3, [r2, #22]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f103 000c 	add.w	r0, r3, #12
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	3304      	adds	r3, #4
 8004ace:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8004ad4:	3b03      	subs	r3, #3
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004ada:	f000 fe89 	bl	80057f0 <bufferBlockPushBytes>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if (ret < 0)
 8004ae4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	da09      	bge.n	8004b00 <canardHandleRxFrame+0x480>
        {
            releaseStatePayload(ins, rx_state);
 8004aec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 fe49 	bl	8005786 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8004af4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004af6:	f000 fd47 	bl	8005588 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8004afa:	f06f 0302 	mvn.w	r3, #2
 8004afe:	e157      	b.n	8004db0 <canardHandleRxFrame+0x730>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	791b      	ldrb	r3, [r3, #4]
 8004b04:	461a      	mov	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	795b      	ldrb	r3, [r3, #5]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b14:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 8004b16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004b1a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004b1e:	f001 f85f 	bl	8005be0 <crcAddSignature>
 8004b22:	4603      	mov	r3, r0
 8004b24:	461a      	mov	r2, r3
 8004b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b28:	829a      	strh	r2, [r3, #20]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8004b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b2c:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8004b32:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	7b1b      	ldrb	r3, [r3, #12]
 8004b38:	3b03      	subs	r3, #3
 8004b3a:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f001 f87e 	bl	8005c3e <crcAdd>
 8004b42:	4603      	mov	r3, r0
 8004b44:	461a      	mov	r2, r3
 8004b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b48:	829a      	strh	r2, [r3, #20]
    {
 8004b4a:	e124      	b.n	8004d96 <canardHandleRxFrame+0x716>
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8004b4c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004b50:	09db      	lsrs	r3, r3, #7
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d133      	bne.n	8004bc4 <canardHandleRxFrame+0x544>
 8004b5c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004b60:	099b      	lsrs	r3, r3, #6
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d12b      	bne.n	8004bc4 <canardHandleRxFrame+0x544>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f103 000c 	add.w	r0, r3, #12
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004b80:	f000 fe36 	bl	80057f0 <bufferBlockPushBytes>
 8004b84:	4603      	mov	r3, r0
 8004b86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (ret < 0)
 8004b88:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	da09      	bge.n	8004ba4 <canardHandleRxFrame+0x524>
        {
            releaseStatePayload(ins, rx_state);
 8004b90:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fdf7 	bl	8005786 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8004b98:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004b9a:	f000 fcf5 	bl	8005588 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8004b9e:	f06f 0302 	mvn.w	r3, #2
 8004ba2:	e105      	b.n	8004db0 <canardHandleRxFrame+0x730>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8004ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ba6:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	1d19      	adds	r1, r3, #4
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	7b1b      	ldrb	r3, [r3, #12]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f001 f842 	bl	8005c3e <crcAdd>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bc0:	829a      	strh	r2, [r3, #20]
    {
 8004bc2:	e0e8      	b.n	8004d96 <canardHandleRxFrame+0x716>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	7b1b      	ldrb	r3, [r3, #12]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

        uint8_t tail_offset = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 8004bd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bd6:	8adb      	ldrh	r3, [r3, #22]
 8004bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d823      	bhi.n	8004c2a <canardHandleRxFrame+0x5aa>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 8004be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004be4:	8adb      	ldrh	r3, [r3, #22]
 8004be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bee:	e012      	b.n	8004c16 <canardHandleRxFrame+0x596>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 8004bf0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	7919      	ldrb	r1, [r3, #4]
 8004bfa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bfe:	4413      	add	r3, r2
 8004c00:	331b      	adds	r3, #27
 8004c02:	460a      	mov	r2, r1
 8004c04:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 8004c06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c08:	3301      	adds	r3, #1
 8004c0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c0c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8004c10:	3301      	adds	r3, #1
 8004c12:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 8004c16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d848      	bhi.n	8004cae <canardHandleRxFrame+0x62e>
 8004c1c:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8004c20:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d3e3      	bcc.n	8004bf0 <canardHandleRxFrame+0x570>
 8004c28:	e041      	b.n	8004cae <canardHandleRxFrame+0x62e>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f103 020c 	add.w	r2, r3, #12
 8004c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f7ff fc1e 	bl	8004478 <canardBufferFromIdx>
 8004c3c:	6638      	str	r0, [r7, #96]	@ 0x60
            if (block != NULL)
 8004c3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d034      	beq.n	8004cae <canardHandleRxFrame+0x62e>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 8004c44:	2305      	movs	r3, #5
 8004c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 8004c48:	e005      	b.n	8004c56 <canardHandleRxFrame+0x5d6>
                {
                    block = block->next;
 8004c4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	663b      	str	r3, [r7, #96]	@ 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 8004c50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c52:	331c      	adds	r3, #28
 8004c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 8004c56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f5      	bne.n	8004c4a <canardHandleRxFrame+0x5ca>
                }
                CANARD_ASSERT(block != NULL);

                const size_t offset_within_block = rx_state->payload_len - offset;
 8004c5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c60:	8adb      	ldrh	r3, [r3, #22]
 8004c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
                CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                for (size_t i = offset_within_block;
 8004c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c74:	e012      	b.n	8004c9c <canardHandleRxFrame+0x61c>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 8004c76:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	7919      	ldrb	r1, [r3, #4]
 8004c80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c84:	4413      	add	r3, r2
 8004c86:	3304      	adds	r3, #4
 8004c88:	460a      	mov	r2, r1
 8004c8a:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 8004c8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c8e:	3301      	adds	r3, #1
 8004c90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c92:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8004c96:	3301      	adds	r3, #1
 8004c98:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 8004c9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c9e:	2b1b      	cmp	r3, #27
 8004ca0:	d805      	bhi.n	8004cae <canardHandleRxFrame+0x62e>
 8004ca2:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8004ca6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d3e3      	bcc.n	8004c76 <canardHandleRxFrame+0x5f6>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 8004cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb2:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 8004cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cb8:	331b      	adds	r3, #27
        CanardRxTransfer rx_transfer = {
 8004cba:	61bb      	str	r3, [r7, #24]
            .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f103 020c 	add.w	r2, r3, #12
 8004cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f7ff fbd5 	bl	8004478 <canardBufferFromIdx>
 8004cce:	4603      	mov	r3, r0
        CanardRxTransfer rx_transfer = {
 8004cd0:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 8004cd2:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8004cd6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d205      	bcs.n	8004cea <canardHandleRxFrame+0x66a>
 8004cde:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	e000      	b.n	8004cec <canardHandleRxFrame+0x66c>
 8004cea:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 8004cec:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 8004cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cf0:	8adb      	ldrh	r3, [r3, #22]
 8004cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 8004d04:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004d06:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004d0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004d0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d10:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8004d14:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8004d1e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8004d22:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004d26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d2a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 8004d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d34:	2200      	movs	r2, #0
 8004d36:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 8004d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d3a:	8a98      	ldrh	r0, [r3, #20]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	1d19      	adds	r1, r3, #4
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	7b1b      	ldrb	r3, [r3, #12]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	461a      	mov	r2, r3
 8004d48:	f000 ff79 	bl	8005c3e <crcAdd>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d52:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 8004d54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d56:	8a9a      	ldrh	r2, [r3, #20]
 8004d58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d5a:	8b1b      	ldrh	r3, [r3, #24]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d106      	bne.n	8004d6e <canardHandleRxFrame+0x6ee>
        {
            ins->on_reception(ins, &rx_transfer);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f107 0210 	add.w	r2, r7, #16
 8004d68:	4611      	mov	r1, r2
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 8004d6e:	f107 0310 	add.w	r3, r7, #16
 8004d72:	4619      	mov	r1, r3
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f90a 	bl	8004f8e <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 8004d7a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d7c:	f000 fc04 	bl	8005588 <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 8004d80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d82:	8a9a      	ldrh	r2, [r3, #20]
 8004d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d86:	8b1b      	ldrh	r3, [r3, #24]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d101      	bne.n	8004d90 <canardHandleRxFrame+0x710>
        {
            return CANARD_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e00f      	b.n	8004db0 <canardHandleRxFrame+0x730>
        }
        else
        {
            return -CANARD_ERROR_RX_BAD_CRC;
 8004d90:	f06f 0310 	mvn.w	r3, #16
 8004d94:	e00c      	b.n	8004db0 <canardHandleRxFrame+0x730>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 8004d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d98:	7ddb      	ldrb	r3, [r3, #23]
 8004d9a:	b25b      	sxtb	r3, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	09db      	lsrs	r3, r3, #7
 8004da2:	b2d9      	uxtb	r1, r3
 8004da4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004da6:	7dd3      	ldrb	r3, [r2, #23]
 8004da8:	f361 13c7 	bfi	r3, r1, #7, #1
 8004dac:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3774      	adds	r7, #116	@ 0x74
 8004db4:	46bd      	mov	sp, r7
 8004db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dba:	bf00      	nop

08004dbc <canardCleanupStaleTransfers>:

void canardCleanupStaleTransfers(CanardInstance* ins, uint64_t current_time_usec)
{
 8004dbc:	b5b0      	push	{r4, r5, r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	e9c7 2300 	strd	r2, r3, [r7]
    CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	613b      	str	r3, [r7, #16]

    while (state != NULL)
 8004dd4:	e053      	b.n	8004e7e <canardCleanupStaleTransfers+0xc2>
    {
        if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004ddc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004de0:	1a84      	subs	r4, r0, r2
 8004de2:	eb61 0503 	sbc.w	r5, r1, r3
 8004de6:	4b2a      	ldr	r3, [pc, #168]	@ (8004e90 <canardCleanupStaleTransfers+0xd4>)
 8004de8:	429c      	cmp	r4, r3
 8004dea:	f175 0300 	sbcs.w	r3, r5, #0
 8004dee:	d33a      	bcc.n	8004e66 <canardCleanupStaleTransfers+0xaa>
        {
            if (state == ins->rx_states)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d11c      	bne.n	8004e34 <canardCleanupStaleTransfers+0x78>
            {
                releaseStatePayload(ins, state);
 8004dfa:	6939      	ldr	r1, [r7, #16]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fcc2 	bl	8005786 <releaseStatePayload>
                ins->rx_states = canardRxFromIdx(&ins->allocator, ins->rx_states->next);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f103 020c 	add.w	r2, r3, #12
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f7ff fb49 	bl	80044a8 <canardRxFromIdx>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	621a      	str	r2, [r3, #32]
                freeBlock(&ins->allocator, state);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	6939      	ldr	r1, [r7, #16]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 ff88 	bl	8005d38 <freeBlock>
                state = ins->rx_states;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	613b      	str	r3, [r7, #16]
                prev = state;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e024      	b.n	8004e7e <canardCleanupStaleTransfers+0xc2>
            }
            else
            {
                releaseStatePayload(ins, state);
 8004e34:	6939      	ldr	r1, [r7, #16]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fca5 	bl	8005786 <releaseStatePayload>
                prev->next = state->next;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	601a      	str	r2, [r3, #0]
                freeBlock(&ins->allocator, state);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	330c      	adds	r3, #12
 8004e48:	6939      	ldr	r1, [r7, #16]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 ff74 	bl	8005d38 <freeBlock>
                state = canardRxFromIdx(&ins->allocator, prev->next);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f103 020c 	add.w	r2, r3, #12
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f7ff fb23 	bl	80044a8 <canardRxFromIdx>
 8004e62:	6138      	str	r0, [r7, #16]
 8004e64:	e00b      	b.n	8004e7e <canardCleanupStaleTransfers+0xc2>
            }
        }
        else
        {
            prev = state;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	617b      	str	r3, [r7, #20]
            state = canardRxFromIdx(&ins->allocator, state->next);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f103 020c 	add.w	r2, r3, #12
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f7ff fb16 	bl	80044a8 <canardRxFromIdx>
 8004e7c:	6138      	str	r0, [r7, #16]
    while (state != NULL)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1a8      	bne.n	8004dd6 <canardCleanupStaleTransfers+0x1a>
            prev_item = item;
            item = item->next;
        }
    }
#endif
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	001e8481 	.word	0x001e8481

08004e94 <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08a      	sub	sp, #40	@ 0x28
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	71fb      	strb	r3, [r7, #7]
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
    CANARD_ASSERT(value != NULL);

    if (bit_length > 64)
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	2b40      	cmp	r3, #64	@ 0x40
 8004ea8:	d901      	bls.n	8004eae <canardEncodeScalar+0x1a>
    {
        CANARD_ASSERT(false);
        bit_length = 64;
 8004eaa:	2340      	movs	r3, #64	@ 0x40
 8004eac:	71fb      	strb	r3, [r7, #7]
    }

    if (bit_length < 1)
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <canardEncodeScalar+0x24>
    {
        CANARD_ASSERT(false);
        bit_length = 1;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	71fb      	strb	r3, [r7, #7]
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 8004eb8:	f107 0310 	add.w	r3, r7, #16
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 ff53 	bl	8005d6c <memset>

    uint8_t std_byte_length = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d105      	bne.n	8004edc <canardEncodeScalar+0x48>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	743b      	strb	r3, [r7, #16]
 8004eda:	e024      	b.n	8004f26 <canardEncodeScalar+0x92>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d805      	bhi.n	8004eee <canardEncodeScalar+0x5a>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	743b      	strb	r3, [r7, #16]
 8004eec:	e01b      	b.n	8004f26 <canardEncodeScalar+0x92>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d805      	bhi.n	8004f00 <canardEncodeScalar+0x6c>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	823b      	strh	r3, [r7, #16]
 8004efe:	e012      	b.n	8004f26 <canardEncodeScalar+0x92>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d805      	bhi.n	8004f12 <canardEncodeScalar+0x7e>
 8004f06:	2304      	movs	r3, #4
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	e009      	b.n	8004f26 <canardEncodeScalar+0x92>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	2b40      	cmp	r3, #64	@ 0x40
 8004f16:	d806      	bhi.n	8004f26 <canardEncodeScalar+0x92>
 8004f18:	2308      	movs	r3, #8
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	e9c7 2304 	strd	r2, r3, [r7, #16]
            storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
        }
    }
#endif

    if (isBigEndian())
 8004f26:	f000 fdeb 	bl	8005b00 <isBigEndian>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d006      	beq.n	8004f3e <canardEncodeScalar+0xaa>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8004f30:	7ffa      	ldrb	r2, [r7, #31]
 8004f32:	f107 0310 	add.w	r3, r7, #16
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fdf2 	bl	8005b22 <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d014      	beq.n	8004f74 <canardEncodeScalar+0xe0>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	08db      	lsrs	r3, r3, #3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	3320      	adds	r3, #32
 8004f52:	443b      	add	r3, r7
 8004f54:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	425b      	negs	r3, r3
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	409a      	lsls	r2, r3
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	08db      	lsrs	r3, r3, #3
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	3320      	adds	r3, #32
 8004f6e:	443b      	add	r3, r7
 8004f70:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 8004f74:	79fa      	ldrb	r2, [r7, #7]
 8004f76:	f107 0010 	add.w	r0, r7, #16
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2100      	movs	r1, #0
 8004f82:	f000 fd46 	bl	8005a12 <copyBitArray>
}
 8004f86:	bf00      	nop
 8004f88:	3720      	adds	r7, #32
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <canardReleaseRxTransferPayload>:

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 8004f98:	e00f      	b.n	8004fba <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f103 020c 	add.w	r2, r3, #12
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f000 fec2 	bl	8005d38 <freeBlock>
        transfer->payload_middle = temp;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1eb      	bne.n	8004f9a <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	829a      	strh	r2, [r3, #20]
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <canardConvertNativeFloatToFloat16>:
{
    return ins->allocator.statistics;
}

uint16_t canardConvertNativeFloatToFloat16(float value)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b08b      	sub	sp, #44	@ 0x2c
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        uint32_t u;
        float f;
    };

    const union FP32 f32inf = { 255UL << 23U };
 8004fee:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8004ff2:	617b      	str	r3, [r7, #20]
    const union FP32 f16inf = { 31UL << 23U };
 8004ff4:	f04f 6378 	mov.w	r3, #260046848	@ 0xf800000
 8004ff8:	613b      	str	r3, [r7, #16]
    const union FP32 magic = { 15UL << 23U };
 8004ffa:	f04f 63f0 	mov.w	r3, #125829120	@ 0x7800000
 8004ffe:	60fb      	str	r3, [r7, #12]
    const uint32_t sign_mask = 0x80000000UL;
 8005000:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005004:	623b      	str	r3, [r7, #32]
    const uint32_t round_mask = 0xFFFFF000UL;
 8005006:	4b21      	ldr	r3, [pc, #132]	@ (800508c <canardConvertNativeFloatToFloat16+0xa8>)
 8005008:	61fb      	str	r3, [r7, #28]

    union FP32 in;
    in.f = value;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60bb      	str	r3, [r7, #8]
    uint32_t sign = in.u & sign_mask;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	6a3a      	ldr	r2, [r7, #32]
 8005012:	4013      	ands	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
    in.u ^= sign;
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	4053      	eors	r3, r2
 800501c:	60bb      	str	r3, [r7, #8]

    uint16_t out = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (in.u >= f32inf.u)
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	429a      	cmp	r2, r3
 8005028:	d30a      	bcc.n	8005040 <canardConvertNativeFloatToFloat16+0x5c>
    {
        out = (in.u > f32inf.u) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	429a      	cmp	r2, r3
 8005030:	d902      	bls.n	8005038 <canardConvertNativeFloatToFloat16+0x54>
 8005032:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005036:	e001      	b.n	800503c <canardConvertNativeFloatToFloat16+0x58>
 8005038:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 800503c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800503e:	e018      	b.n	8005072 <canardConvertNativeFloatToFloat16+0x8e>
    }
    else
    {
        in.u &= round_mask;
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4013      	ands	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
        in.f *= magic.f;
 8005048:	ed97 7a02 	vldr	s14, [r7, #8]
 800504c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005054:	edc7 7a02 	vstr	s15, [r7, #8]
        in.u -= round_mask;
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	60bb      	str	r3, [r7, #8]
        if (in.u > f16inf.u)
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	429a      	cmp	r2, r3
 8005066:	d901      	bls.n	800506c <canardConvertNativeFloatToFloat16+0x88>
        {
            in.u = f16inf.u;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	60bb      	str	r3, [r7, #8]
        }
        out = (uint16_t)(in.u >> 13U);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	0b5b      	lsrs	r3, r3, #13
 8005070:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    out |= (uint16_t)(sign >> 16U);
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	b29a      	uxth	r2, r3
 8005078:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800507a:	4313      	orrs	r3, r2
 800507c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    return out;
 800507e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8005080:	4618      	mov	r0, r3
 8005082:	372c      	adds	r7, #44	@ 0x2c
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	fffff000 	.word	0xfffff000

08005090 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	460a      	mov	r2, r1
 800509a:	71fb      	strb	r3, [r7, #7]
 800509c:	4613      	mov	r3, r2
 800509e:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(a - b);
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	79bb      	ldrb	r3, [r7, #6]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 80050ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	da03      	bge.n	80050be <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 80050b6:	89fb      	ldrh	r3, [r7, #14]
 80050b8:	3320      	adds	r3, #32
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 80050be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	3301      	adds	r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b1f      	cmp	r3, #31
 80050e8:	d902      	bls.n	80050f0 <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
    }
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d801      	bhi.n	8005110 <dlcToDataLength+0x14>
        return dlc;
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	e01e      	b.n	800514e <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	2b09      	cmp	r3, #9
 8005114:	d101      	bne.n	800511a <dlcToDataLength+0x1e>
        return 12;
 8005116:	230c      	movs	r3, #12
 8005118:	e019      	b.n	800514e <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	2b0a      	cmp	r3, #10
 800511e:	d101      	bne.n	8005124 <dlcToDataLength+0x28>
        return 16;
 8005120:	2310      	movs	r3, #16
 8005122:	e014      	b.n	800514e <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	2b0b      	cmp	r3, #11
 8005128:	d101      	bne.n	800512e <dlcToDataLength+0x32>
        return 20;
 800512a:	2314      	movs	r3, #20
 800512c:	e00f      	b.n	800514e <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	2b0c      	cmp	r3, #12
 8005132:	d101      	bne.n	8005138 <dlcToDataLength+0x3c>
        return 24;
 8005134:	2318      	movs	r3, #24
 8005136:	e00a      	b.n	800514e <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	2b0d      	cmp	r3, #13
 800513c:	d101      	bne.n	8005142 <dlcToDataLength+0x46>
        return 32;
 800513e:	2320      	movs	r3, #32
 8005140:	e005      	b.n	800514e <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	2b0e      	cmp	r3, #14
 8005146:	d101      	bne.n	800514c <dlcToDataLength+0x50>
        return 48;
 8005148:	2330      	movs	r3, #48	@ 0x30
 800514a:	e000      	b.n	800514e <dlcToDataLength+0x52>
    }
    return 64;
 800514c:	2340      	movs	r3, #64	@ 0x40
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	4603      	mov	r3, r0
 8005162:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	2b08      	cmp	r3, #8
 8005168:	d801      	bhi.n	800516e <dataLengthToDlc+0x14>
        return data_length;
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	e01e      	b.n	80051ac <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	2b0c      	cmp	r3, #12
 8005172:	d801      	bhi.n	8005178 <dataLengthToDlc+0x1e>
        return 9;
 8005174:	2309      	movs	r3, #9
 8005176:	e019      	b.n	80051ac <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	2b10      	cmp	r3, #16
 800517c:	d801      	bhi.n	8005182 <dataLengthToDlc+0x28>
        return 10;
 800517e:	230a      	movs	r3, #10
 8005180:	e014      	b.n	80051ac <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	2b14      	cmp	r3, #20
 8005186:	d801      	bhi.n	800518c <dataLengthToDlc+0x32>
        return 11;
 8005188:	230b      	movs	r3, #11
 800518a:	e00f      	b.n	80051ac <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	2b18      	cmp	r3, #24
 8005190:	d801      	bhi.n	8005196 <dataLengthToDlc+0x3c>
        return 12;
 8005192:	230c      	movs	r3, #12
 8005194:	e00a      	b.n	80051ac <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	2b20      	cmp	r3, #32
 800519a:	d801      	bhi.n	80051a0 <dataLengthToDlc+0x46>
        return 13;
 800519c:	230d      	movs	r3, #13
 800519e:	e005      	b.n	80051ac <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	2b30      	cmp	r3, #48	@ 0x30
 80051a4:	d801      	bhi.n	80051aa <dataLengthToDlc+0x50>
        return 14;
 80051a6:	230e      	movs	r3, #14
 80051a8:	e000      	b.n	80051ac <dataLengthToDlc+0x52>
    }
    return 15;
 80051aa:	230f      	movs	r3, #15
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08c      	sub	sp, #48	@ 0x30
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80051d0:	f06f 0301 	mvn.w	r3, #1
 80051d4:	e11c      	b.n	8005410 <enqueueTxFrames+0x258>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	8c1b      	ldrh	r3, [r3, #32]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d006      	beq.n	80051ec <enqueueTxFrames+0x34>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80051e6:	f06f 0301 	mvn.w	r3, #1
 80051ea:	e111      	b.n	8005410 <enqueueTxFrames+0x258>
    }

    int16_t result = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 80051f0:	2308      	movs	r3, #8
 80051f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	8c1a      	ldrh	r2, [r3, #32]
 80051fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051fe:	b29b      	uxth	r3, r3
 8005200:	429a      	cmp	r2, r3
 8005202:	d24b      	bcs.n	800529c <enqueueTxFrames+0xe4>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	330c      	adds	r3, #12
 8005208:	4618      	mov	r0, r3
 800520a:	f000 f94a 	bl	80054a2 <createTxItem>
 800520e:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d102      	bne.n	800521c <enqueueTxFrames+0x64>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8005216:	f06f 0302 	mvn.w	r3, #2
 800521a:	e0f9      	b.n	8005410 <enqueueTxFrames+0x258>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f103 0008 	add.w	r0, r3, #8
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	69d9      	ldr	r1, [r3, #28]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	8c1b      	ldrh	r3, [r3, #32]
 800522a:	461a      	mov	r2, r3
 800522c:	f000 fdca 	bl	8005dc4 <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	8c1b      	ldrh	r3, [r3, #32]
 8005234:	3301      	adds	r3, #1
 8005236:	b29b      	uxth	r3, r3
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ff8e 	bl	800515a <dataLengthToDlc>
 800523e:	4603      	mov	r3, r0
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff ff5b 	bl	80050fc <dlcToDataLength>
 8005246:	4603      	mov	r3, r0
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	8c1b      	ldrh	r3, [r3, #32]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	3301      	adds	r3, #1
 8005258:	b2da      	uxtb	r2, r3
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	b2db      	uxtb	r3, r3
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	8c12      	ldrh	r2, [r2, #32]
 800526e:	4611      	mov	r1, r2
 8005270:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8005274:	b2da      	uxtb	r2, r3
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	440b      	add	r3, r1
 800527a:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 8005286:	6979      	ldr	r1, [r7, #20]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f8c5 	bl	8005418 <pushTxQueue>
        result++;
 800528e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8005292:	b29b      	uxth	r3, r3
 8005294:	3301      	adds	r3, #1
 8005296:	b29b      	uxth	r3, r3
 8005298:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800529a:	e0b7      	b.n	800540c <enqueueTxFrames+0x254>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        uint8_t toggle = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint8_t sot_eot = 0x80;
 80052a6:	2380      	movs	r3, #128	@ 0x80
 80052a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
          see if we are going to be able to allocate enough blocks for
          this transfer. If not then stop now, otherwise we will end
          up doing a partial (corrupt) transfer which will just make
          the situation worse as it will waste bus bandwidth
         */
        const uint16_t total_bytes = transfer->payload_len + 2; // including CRC
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	8c1b      	ldrh	r3, [r3, #32]
 80052b0:	3302      	adds	r3, #2
 80052b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
        const uint8_t bytes_per_frame = frame_max_data_len-1; // sot/eot byte consumes one byte
 80052b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052b8:	3b01      	subs	r3, #1
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        const uint16_t frames_needed = (total_bytes + (bytes_per_frame-1)) / bytes_per_frame;
 80052be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052c4:	3b01      	subs	r3, #1
 80052c6:	441a      	add	r2, r3
 80052c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80052d0:	843b      	strh	r3, [r7, #32]
        const uint16_t blocks_available = ins->allocator.statistics.capacity_blocks - ins->allocator.statistics.current_usage_blocks;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8a9a      	ldrh	r2, [r3, #20]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8adb      	ldrh	r3, [r3, #22]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	83fb      	strh	r3, [r7, #30]
        if (blocks_available < frames_needed) {
 80052de:	8bfa      	ldrh	r2, [r7, #30]
 80052e0:	8c3b      	ldrh	r3, [r7, #32]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d202      	bcs.n	80052ec <enqueueTxFrames+0x134>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80052e6:	f06f 0302 	mvn.w	r3, #2
 80052ea:	e091      	b.n	8005410 <enqueueTxFrames+0x258>
        }

        CanardTxQueueItem* queue_item = NULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 80052f0:	e086      	b.n	8005400 <enqueueTxFrames+0x248>
        {
            queue_item = createTxItem(&ins->allocator);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	330c      	adds	r3, #12
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f8d3 	bl	80054a2 <createTxItem>
 80052fc:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <enqueueTxFrames+0x152>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8005304:	f06f 0302 	mvn.w	r3, #2
 8005308:	e082      	b.n	8005410 <enqueueTxFrames+0x258>
            }

            uint16_t i = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	853b      	strh	r3, [r7, #40]	@ 0x28
            if (data_index == 0)
 800530e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10c      	bne.n	800532e <enqueueTxFrames+0x176>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	b2da      	uxtb	r2, r3
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 800531c:	88fb      	ldrh	r3, [r7, #6]
 800531e:	0a1b      	lsrs	r3, r3, #8
 8005320:	b29b      	uxth	r3, r3
 8005322:	b2da      	uxtb	r2, r3
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	725a      	strb	r2, [r3, #9]
                i = 2;
 8005328:	2302      	movs	r3, #2
 800532a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800532c:	e012      	b.n	8005354 <enqueueTxFrames+0x19c>
            }
            else
            {
                i = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	853b      	strh	r3, [r7, #40]	@ 0x28
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8005332:	e00f      	b.n	8005354 <enqueueTxFrames+0x19c>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	69da      	ldr	r2, [r3, #28]
 8005338:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800533a:	441a      	add	r2, r3
 800533c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800533e:	7811      	ldrb	r1, [r2, #0]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4413      	add	r3, r2
 8005344:	460a      	mov	r2, r1
 8005346:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8005348:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800534a:	3301      	adds	r3, #1
 800534c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800534e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005350:	3301      	adds	r3, #1
 8005352:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005354:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005356:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800535a:	3b01      	subs	r3, #1
 800535c:	429a      	cmp	r2, r3
 800535e:	da04      	bge.n	800536a <enqueueTxFrames+0x1b2>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	8c1b      	ldrh	r3, [r3, #32]
 8005364:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005366:	429a      	cmp	r2, r3
 8005368:	d3e4      	bcc.n	8005334 <enqueueTxFrames+0x17c>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	8c1b      	ldrh	r3, [r3, #32]
 800536e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005370:	429a      	cmp	r2, r3
 8005372:	d002      	beq.n	800537a <enqueueTxFrames+0x1c2>
 8005374:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005378:	e000      	b.n	800537c <enqueueTxFrames+0x1c4>
 800537a:	2340      	movs	r3, #64	@ 0x40
 800537c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8005380:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005382:	3301      	adds	r3, #1
 8005384:	b29b      	uxth	r3, r3
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fee7 	bl	800515a <dataLengthToDlc>
 800538c:	4603      	mov	r3, r0
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff feb4 	bl	80050fc <dlcToDataLength>
 8005394:	4603      	mov	r3, r0
 8005396:	3b01      	subs	r3, #1
 8005398:	853b      	strh	r3, [r7, #40]	@ 0x28
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 800539a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800539e:	015b      	lsls	r3, r3, #5
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80053a6:	4313      	orrs	r3, r2
 80053a8:	b2d9      	uxtb	r1, r3
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80053b8:	430a      	orrs	r2, r1
 80053ba:	b2d1      	uxtb	r1, r2
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4413      	add	r3, r2
 80053c0:	460a      	mov	r2, r1
 80053c2:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 80053ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	3301      	adds	r3, #1
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 80053da:	69b9      	ldr	r1, [r7, #24]
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f81b 	bl	8005418 <pushTxQueue>

            result++;
 80053e2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3301      	adds	r3, #1
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            toggle ^= 1;
 80053ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053f2:	f083 0301 	eor.w	r3, r3, #1
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            sot_eot = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        while (transfer->payload_len - data_index != 0)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	8c1b      	ldrh	r3, [r3, #32]
 8005404:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005406:	429a      	cmp	r2, r3
 8005408:	f47f af73 	bne.w	80052f2 <enqueueTxFrames+0x13a>
        }
    }

    return result;
 800540c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
}
 8005410:	4618      	mov	r0, r3
 8005412:	3730      	adds	r7, #48	@ 0x30
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8005430:	e034      	b.n	800549c <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005436:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543c:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 800543e:	e02a      	b.n	8005496 <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f000 f840 	bl	80054d0 <isPriorityHigher>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d012      	beq.n	800547c <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	429a      	cmp	r2, r3
 800545e:	d106      	bne.n	800546e <pushTxQueue+0x56>
            {
                item->next = queue;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 800546c:	e016      	b.n	800549c <pushTxQueue+0x84>
                previous->next = item;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	601a      	str	r2, [r3, #0]
            return;
 800547a:	e00f      	b.n	800549c <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d103      	bne.n	800548c <pushTxQueue+0x74>
            {
                queue->next = item;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	601a      	str	r2, [r3, #0]
                return;
 800548a:	e007      	b.n	800549c <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1d1      	bne.n	8005440 <pushTxQueue+0x28>
            }
        }
    }
}
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fc1b 	bl	8005ce6 <allocateBlock>
 80054b0:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <createTxItem+0x1a>
    {
        return NULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e005      	b.n	80054c8 <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 80054bc:	2214      	movs	r2, #20
 80054be:	2100      	movs	r1, #0
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 fc53 	bl	8005d6c <memset>
    return item;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b089      	sub	sp, #36	@ 0x24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80054e0:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80054e8:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	0fdb      	lsrs	r3, r3, #31
 80054ee:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	0fdb      	lsrs	r3, r3, #31
 80054f4:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 80054f6:	7dfa      	ldrb	r2, [r7, #23]
 80054f8:	7dbb      	ldrb	r3, [r7, #22]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d01d      	beq.n	800553a <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <isPriorityHigher+0x3a>
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	0c9b      	lsrs	r3, r3, #18
 8005508:	e000      	b.n	800550c <isPriorityHigher+0x3c>
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 800550e:	7dbb      	ldrb	r3, [r7, #22]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <isPriorityHigher+0x4a>
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	0c9b      	lsrs	r3, r3, #18
 8005518:	e000      	b.n	800551c <isPriorityHigher+0x4c>
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	429a      	cmp	r2, r3
 8005524:	d007      	beq.n	8005536 <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	429a      	cmp	r2, r3
 800552c:	bf34      	ite	cc
 800552e:	2301      	movcc	r3, #1
 8005530:	2300      	movcs	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	e022      	b.n	800557c <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 8005536:	7dbb      	ldrb	r3, [r7, #22]
 8005538:	e020      	b.n	800557c <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	bf14      	ite	ne
 8005544:	2301      	movne	r3, #1
 8005546:	2300      	moveq	r3, #0
 8005548:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	bf14      	ite	ne
 8005554:	2301      	movne	r3, #1
 8005556:	2300      	moveq	r3, #0
 8005558:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	429a      	cmp	r2, r3
 8005560:	d105      	bne.n	800556e <isPriorityHigher+0x9e>
 8005562:	7d7a      	ldrb	r2, [r7, #21]
 8005564:	7d3b      	ldrb	r3, [r7, #20]
 8005566:	429a      	cmp	r2, r3
 8005568:	d001      	beq.n	800556e <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 800556a:	7d3b      	ldrb	r3, [r7, #20]
 800556c:	e006      	b.n	800557c <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	429a      	cmp	r2, r3
 8005574:	bf34      	ite	cc
 8005576:	2301      	movcc	r3, #1
 8005578:	2300      	movcs	r3, #0
 800557a:	b2db      	uxtb	r3, r3
}
 800557c:	4618      	mov	r0, r3
 800557e:	3724      	adds	r7, #36	@ 0x24
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
    state->transfer_id++;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	7ddb      	ldrb	r3, [r3, #23]
 8005594:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8005598:	b2db      	uxtb	r3, r3
 800559a:	3301      	adds	r3, #1
 800559c:	f003 031f 	and.w	r3, r3, #31
 80055a0:	b2d9      	uxtb	r1, r3
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	7dd3      	ldrb	r3, [r2, #23]
 80055a6:	f361 0386 	bfi	r3, r1, #2, #5
 80055aa:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	8ad3      	ldrh	r3, [r2, #22]
 80055b0:	f36f 0309 	bfc	r3, #0, #10
 80055b4:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	7dd3      	ldrb	r3, [r2, #23]
 80055ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055be:	75d3      	strb	r3, [r2, #23]
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <extractDataType>:

/**
 * returns data type from id
 */
uint16_t extractDataType(uint32_t id)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f819 	bl	800560c <extractTransferType>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d10e      	bne.n	80055fe <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 80055f2:	89fb      	ldrh	r3, [r7, #14]
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 80055fa:	89fb      	ldrh	r3, [r7, #14]
 80055fc:	e002      	b.n	8005604 <extractDataType+0x38>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	b2db      	uxtb	r3, r3
    }
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <extractTransferType>:

/**
 * returns transfer type from id
 */
CanardTransferType extractTransferType(uint32_t id)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	09db      	lsrs	r3, r3, #7
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	f083 0301 	eor.w	r3, r3, #1
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <extractTransferType+0x2a>
    {
        return CanardTransferTypeBroadcast;
 8005632:	2302      	movs	r3, #2
 8005634:	e008      	b.n	8005648 <extractTransferType+0x3c>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	0bdb      	lsrs	r3, r3, #15
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <extractTransferType+0x3a>
    {
        return CanardTransferTypeRequest;
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <extractTransferType+0x3c>
    }
    else
    {
        return CanardTransferTypeResponse;
 8005646:	2300      	movs	r3, #0
    }
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d110      	bne.n	800568c <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	330c      	adds	r3, #12
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 f865 	bl	8005740 <createRxState>
 8005676:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <traverseRxStates+0x2e>
        {
            return NULL;
 800567e:	2300      	movs	r3, #0
 8005680:	e013      	b.n	80056aa <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	621a      	str	r2, [r3, #32]
        return states;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	e00e      	b.n	80056aa <traverseRxStates+0x56>
    }

    states = findRxState(ins, transfer_descriptor);
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f80f 	bl	80056b2 <findRxState>
 8005694:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <traverseRxStates+0x4c>
    {
        return states;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	e004      	b.n	80056aa <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f827 	bl	80056f6 <prependRxState>
 80056a8:	4603      	mov	r3, r0
    }
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]
    CanardRxState *state = ins->rx_states;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	60fb      	str	r3, [r7, #12]
    while (state != NULL)
 80056c2:	e010      	b.n	80056e6 <findRxState+0x34>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d101      	bne.n	80056d2 <findRxState+0x20>
        {
            return state;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	e00d      	b.n	80056ee <findRxState+0x3c>
        }
        state = canardRxFromIdx(&ins->allocator, state->next);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f103 020c 	add.w	r2, r3, #12
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f7fe fee2 	bl	80044a8 <canardRxFromIdx>
 80056e4:	60f8      	str	r0, [r7, #12]
    while (state != NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1eb      	bne.n	80056c4 <findRxState+0x12>
    }
    return NULL;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	330c      	adds	r3, #12
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 f81a 	bl	8005740 <createRxState>
 800570c:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <prependRxState+0x22>
    {
        return NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	e00f      	b.n	8005738 <prependRxState+0x42>
    }

    state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f103 020c 	add.w	r2, r3, #12
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	4619      	mov	r1, r3
 8005724:	4610      	mov	r0, r2
 8005726:	f7fe fecb 	bl	80044c0 <canardRxToIdx>
 800572a:	4602      	mov	r2, r0
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
    return state;
 8005736:	68fb      	ldr	r3, [r7, #12]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08c      	sub	sp, #48	@ 0x30
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 800574a:	f107 0308 	add.w	r3, r7, #8
 800574e:	2220      	movs	r2, #32
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fb0a 	bl	8005d6c <memset>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	61bb      	str	r3, [r7, #24]
        .next = CANARD_BUFFER_IDX_NONE,
        .buffer_blocks = CANARD_BUFFER_IDX_NONE,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fac2 	bl	8005ce6 <allocateBlock>
 8005762:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (state == NULL)
 8005764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <createRxState+0x2e>
    {
        return NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	e007      	b.n	800577e <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 800576e:	f107 0308 	add.w	r3, r7, #8
 8005772:	2220      	movs	r2, #32
 8005774:	4619      	mov	r1, r3
 8005776:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005778:	f000 fb24 	bl	8005dc4 <memcpy>

    return state;
 800577c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800577e:	4618      	mov	r0, r3
 8005780:	3730      	adds	r7, #48	@ 0x30
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8005790:	e01b      	b.n	80057ca <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f103 020c 	add.w	r2, r3, #12
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4619      	mov	r1, r3
 800579e:	4610      	mov	r0, r2
 80057a0:	f7fe fe6a 	bl	8004478 <canardBufferFromIdx>
 80057a4:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	330c      	adds	r3, #12
 80057b0:	68f9      	ldr	r1, [r7, #12]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fac0 	bl	8005d38 <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	330c      	adds	r3, #12
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fe66 	bl	8004490 <canardBufferToIdx>
 80057c4:	4602      	mov	r2, r0
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1df      	bne.n	8005792 <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	8ad3      	ldrh	r3, [r2, #22]
 80057d6:	f36f 0309 	bfc	r3, #0, #10
 80057da:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
}
 80057e4:	4610      	mov	r0, r2
 80057e6:	4619      	mov	r1, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	@ 0x28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	8adb      	ldrh	r3, [r3, #22]
 8005806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b05      	cmp	r3, #5
 800580e:	d036      	beq.n	800587e <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	8adb      	ldrh	r3, [r3, #22]
 8005814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005818:	b29b      	uxth	r3, r3
 800581a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800581c:	e00e      	b.n	800583c <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 800581e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	441a      	add	r2, r3
 8005824:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005826:	7811      	ldrb	r1, [r2, #0]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	4413      	add	r3, r2
 800582c:	460a      	mov	r2, r1
 800582e:	76da      	strb	r2, [r3, #27]
             i++, data_index++)
 8005830:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005832:	3301      	adds	r3, #1
 8005834:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005836:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005838:	3301      	adds	r3, #1
 800583a:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 800583c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800583e:	2b04      	cmp	r3, #4
 8005840:	d804      	bhi.n	800584c <bufferBlockPushBytes+0x5c>
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	b29b      	uxth	r3, r3
 8005846:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005848:	429a      	cmp	r2, r3
 800584a:	d3e8      	bcc.n	800581e <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	b29b      	uxth	r3, r3
 8005850:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005852:	429a      	cmp	r2, r3
 8005854:	d313      	bcc.n	800587e <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	8adb      	ldrh	r3, [r3, #22]
 800585a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800585e:	b29b      	uxth	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	b29b      	uxth	r3, r3
 8005866:	4413      	add	r3, r2
 8005868:	b29b      	uxth	r3, r3
 800586a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800586e:	b299      	uxth	r1, r3
            state->payload_len =
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	8ad3      	ldrh	r3, [r2, #22]
 8005874:	f361 0309 	bfi	r3, r1, #0, #10
 8005878:	82d3      	strh	r3, [r2, #22]
            return 1;
 800587a:	2301      	movs	r3, #1
 800587c:	e0ae      	b.n	80059dc <bufferBlockPushBytes+0x1ec>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	8adb      	ldrh	r3, [r3, #22]
 8005882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005886:	b29b      	uxth	r3, r3
 8005888:	1f5a      	subs	r2, r3, #5
 800588a:	0893      	lsrs	r3, r2, #2
 800588c:	4955      	ldr	r1, [pc, #340]	@ (80059e4 <bufferBlockPushBytes+0x1f4>)
 800588e:	fba1 3103 	umull	r3, r1, r1, r3
 8005892:	460b      	mov	r3, r1
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	1a5b      	subs	r3, r3, r1
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 800589c:	847b      	strh	r3, [r7, #34]	@ 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d113      	bne.n	80058d2 <bufferBlockPushBytes+0xe2>
    {
        block = createBufferBlock(allocator);
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f89c 	bl	80059e8 <createBufferBlock>
 80058b0:	61f8      	str	r0, [r7, #28]
        state->buffer_blocks = canardBufferToIdx(allocator, block);
 80058b2:	69f9      	ldr	r1, [r7, #28]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7fe fdeb 	bl	8004490 <canardBufferToIdx>
 80058ba:	4602      	mov	r2, r0
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	605a      	str	r2, [r3, #4]
        if (block == NULL)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <bufferBlockPushBytes+0xdc>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80058c6:	f06f 0302 	mvn.w	r3, #2
 80058ca:	e087      	b.n	80059dc <bufferBlockPushBytes+0x1ec>
        }

        index_at_nth_block = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80058d0:	e06c      	b.n	80059ac <bufferBlockPushBytes+0x1bc>
    }
    else
    {
        uint16_t nth_block = 1;
 80058d2:	2301      	movs	r3, #1
 80058d4:	837b      	strh	r3, [r7, #26]

        // get to block
        block = canardBufferFromIdx(allocator, state->buffer_blocks);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	4619      	mov	r1, r3
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7fe fdcb 	bl	8004478 <canardBufferFromIdx>
 80058e2:	61f8      	str	r0, [r7, #28]
        while (block->next != NULL)
 80058e4:	e005      	b.n	80058f2 <bufferBlockPushBytes+0x102>
        {
            nth_block++;
 80058e6:	8b7b      	ldrh	r3, [r7, #26]
 80058e8:	3301      	adds	r3, #1
 80058ea:	837b      	strh	r3, [r7, #26]
            block = block->next;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f5      	bne.n	80058e6 <bufferBlockPushBytes+0xf6>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	8adb      	ldrh	r3, [r3, #22]
 80058fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005902:	b29b      	uxth	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	4413      	add	r3, r2
 800590a:	3b05      	subs	r3, #5
 800590c:	089b      	lsrs	r3, r3, #2
 800590e:	4a35      	ldr	r2, [pc, #212]	@ (80059e4 <bufferBlockPushBytes+0x1f4>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 8005916:	3301      	adds	r3, #1
 8005918:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 800591a:	8afa      	ldrh	r2, [r7, #22]
 800591c:	8b7b      	ldrh	r3, [r7, #26]
 800591e:	429a      	cmp	r2, r3
 8005920:	d944      	bls.n	80059ac <bufferBlockPushBytes+0x1bc>
 8005922:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005924:	2b00      	cmp	r3, #0
 8005926:	d141      	bne.n	80059ac <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f85d 	bl	80059e8 <createBufferBlock>
 800592e:	4602      	mov	r2, r0
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <bufferBlockPushBytes+0x152>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 800593c:	f06f 0302 	mvn.w	r3, #2
 8005940:	e04c      	b.n	80059dc <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 8005948:	e030      	b.n	80059ac <bufferBlockPushBytes+0x1bc>
    {
        for (uint16_t i = index_at_nth_block;
 800594a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800594c:	833b      	strh	r3, [r7, #24]
 800594e:	e00e      	b.n	800596e <bufferBlockPushBytes+0x17e>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8005950:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	441a      	add	r2, r3
 8005956:	8b3b      	ldrh	r3, [r7, #24]
 8005958:	7811      	ldrb	r1, [r2, #0]
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	460a      	mov	r2, r1
 8005960:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 8005962:	8b3b      	ldrh	r3, [r7, #24]
 8005964:	3301      	adds	r3, #1
 8005966:	833b      	strh	r3, [r7, #24]
 8005968:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800596a:	3301      	adds	r3, #1
 800596c:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 800596e:	8b3b      	ldrh	r3, [r7, #24]
 8005970:	2b1b      	cmp	r3, #27
 8005972:	d804      	bhi.n	800597e <bufferBlockPushBytes+0x18e>
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	b29b      	uxth	r3, r3
 8005978:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800597a:	429a      	cmp	r2, r3
 800597c:	d3e8      	bcc.n	8005950 <bufferBlockPushBytes+0x160>
        }

        if (data_index < data_len)
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	b29b      	uxth	r3, r3
 8005982:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005984:	429a      	cmp	r2, r3
 8005986:	d211      	bcs.n	80059ac <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f82d 	bl	80059e8 <createBufferBlock>
 800598e:	4602      	mov	r2, r0
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <bufferBlockPushBytes+0x1b2>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 800599c:	f06f 0302 	mvn.w	r3, #2
 80059a0:	e01c      	b.n	80059dc <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	847b      	strh	r3, [r7, #34]	@ 0x22
    while (data_index < data_len)
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d3c9      	bcc.n	800594a <bufferBlockPushBytes+0x15a>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	8adb      	ldrh	r3, [r3, #22]
 80059ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059be:	b29b      	uxth	r3, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	4413      	add	r3, r2
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ce:	b299      	uxth	r1, r3
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	8ad3      	ldrh	r3, [r2, #22]
 80059d4:	f361 0309 	bfi	r3, r1, #0, #10
 80059d8:	82d3      	strh	r3, [r2, #22]

    return 1;
 80059da:	2301      	movs	r3, #1
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3728      	adds	r7, #40	@ 0x28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	24924925 	.word	0x24924925

080059e8 <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f978 	bl	8005ce6 <allocateBlock>
 80059f6:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <createBufferBlock+0x1a>
    {
        return NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e003      	b.n	8005a0a <createBufferBlock+0x22>
    }
    block->next = NULL;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
    return block;
 8005a08:	68fb      	ldr	r3, [r7, #12]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b089      	sub	sp, #36	@ 0x24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	08db      	lsrs	r3, r3, #3
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 8005a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2c:	08db      	lsrs	r3, r3, #3
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	4413      	add	r3, r2
 8005a32:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 8005a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4413      	add	r3, r2
 8005a4a:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 8005a4c:	e04d      	b.n	8005aea <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8005a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8005a62:	7eba      	ldrb	r2, [r7, #26]
 8005a64:	7efb      	ldrb	r3, [r7, #27]
 8005a66:	4293      	cmp	r3, r2
 8005a68:	bf38      	it	cc
 8005a6a:	4613      	movcc	r3, r2
 8005a6c:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 8005a6e:	7e7b      	ldrb	r3, [r7, #25]
 8005a70:	f1c3 0208 	rsb	r2, r3, #8
 8005a74:	69f9      	ldr	r1, [r7, #28]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	1acb      	subs	r3, r1, r3
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	bf28      	it	cs
 8005a7e:	4613      	movcs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8005a82:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	7ebb      	ldrb	r3, [r7, #26]
 8005a92:	fa42 f303 	asr.w	r3, r2, r3
 8005a96:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	08db      	lsrs	r3, r3, #3
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	7efb      	ldrb	r3, [r7, #27]
 8005aa6:	409a      	lsls	r2, r3
 8005aa8:	7ebb      	ldrb	r3, [r7, #26]
 8005aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005aae:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	08db      	lsrs	r3, r3, #3
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	781a      	ldrb	r2, [r3, #0]
 8005aba:	7cfb      	ldrb	r3, [r7, #19]
 8005abc:	43db      	mvns	r3, r3
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	b2d9      	uxtb	r1, r3
 8005ac4:	7cba      	ldrb	r2, [r7, #18]
 8005ac6:	7cfb      	ldrb	r3, [r7, #19]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 8005acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ace:	08db      	lsrs	r3, r3, #3
 8005ad0:	6838      	ldr	r0, [r7, #0]
 8005ad2:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 8005ad8:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	4413      	add	r3, r2
 8005ae0:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 8005ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d1ad      	bne.n	8005a4e <copyBitArray+0x3c>
    }
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	3724      	adds	r7, #36	@ 0x24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <isBigEndian>:

    return bit_length;
}

CANARD_INTERNAL bool isBigEndian(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 8005b06:	2301      	movs	r3, #1
 8005b08:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 8005b0a:	797b      	ldrb	r3, [r7, #5]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	bf0c      	ite	eq
 8005b10:	2301      	moveq	r3, #1
 8005b12:	2300      	movne	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
#endif
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b087      	sub	sp, #28
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 8005b3a:	e017      	b.n	8005b6c <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	4413      	add	r3, r2
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	441a      	add	r2, r3
 8005b4c:	68f9      	ldr	r1, [r7, #12]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	440b      	add	r3, r1
 8005b52:	7812      	ldrb	r2, [r2, #0]
 8005b54:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	7afa      	ldrb	r2, [r7, #11]
 8005b5e:	701a      	strb	r2, [r3, #0]
        fwd++;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	3301      	adds	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
        rev--;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d3e3      	bcc.n	8005b3c <swapByteOrder+0x1a>
    }
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	4603      	mov	r3, r0
 8005b8a:	460a      	mov	r2, r1
 8005b8c:	80fb      	strh	r3, [r7, #6]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 8005b92:	797b      	ldrb	r3, [r7, #5]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	4053      	eors	r3, r2
 8005b9e:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	e012      	b.n	8005bcc <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 8005ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da08      	bge.n	8005bc0 <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8005bb8:	f083 0301 	eor.w	r3, r3, #1
 8005bbc:	80fb      	strh	r3, [r7, #6]
 8005bbe:	e002      	b.n	8005bc6 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 8005bc0:	88fb      	ldrh	r3, [r7, #6]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	2b07      	cmp	r3, #7
 8005bd0:	d9e9      	bls.n	8005ba6 <crcAddByte+0x24>
        }
    }
    return crc_val;
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4601      	mov	r1, r0
 8005be8:	e9c7 2300 	strd	r2, r3, [r7]
 8005bec:	460b      	mov	r3, r1
 8005bee:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	82fb      	strh	r3, [r7, #22]
 8005bf4:	e01b      	b.n	8005c2e <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8005bf6:	8af9      	ldrh	r1, [r7, #22]
 8005bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bfc:	f1c1 0620 	rsb	r6, r1, #32
 8005c00:	f1a1 0020 	sub.w	r0, r1, #32
 8005c04:	fa22 f401 	lsr.w	r4, r2, r1
 8005c08:	fa03 f606 	lsl.w	r6, r3, r6
 8005c0c:	4334      	orrs	r4, r6
 8005c0e:	fa23 f000 	lsr.w	r0, r3, r0
 8005c12:	4304      	orrs	r4, r0
 8005c14:	fa23 f501 	lsr.w	r5, r3, r1
 8005c18:	b2e2      	uxtb	r2, r4
 8005c1a:	89fb      	ldrh	r3, [r7, #14]
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff ffaf 	bl	8005b82 <crcAddByte>
 8005c24:	4603      	mov	r3, r0
 8005c26:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8005c28:	8afb      	ldrh	r3, [r7, #22]
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	82fb      	strh	r3, [r7, #22]
 8005c2e:	8afb      	ldrh	r3, [r7, #22]
 8005c30:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c32:	d9e0      	bls.n	8005bf6 <crcAddSignature+0x16>
    }
    return crc_val;
 8005c34:	89fb      	ldrh	r3, [r7, #14]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c3e <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	4603      	mov	r3, r0
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8005c4c:	e00a      	b.n	8005c64 <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	60ba      	str	r2, [r7, #8]
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	89fb      	ldrh	r3, [r7, #14]
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff ff91 	bl	8005b82 <crcAddByte>
 8005c60:	4603      	mov	r3, r0
 8005c62:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	1e5a      	subs	r2, r3, #1
 8005c68:	607a      	str	r2, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1ef      	bne.n	8005c4e <crcAdd+0x10>
    }
    return crc_val;
 8005c6e:	89fb      	ldrh	r3, [r7, #14]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b089      	sub	sp, #36	@ 0x24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3304      	adds	r3, #4
 8005c98:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 8005c9a:	e00b      	b.n	8005cb4 <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	015b      	lsls	r3, r3, #5
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	441a      	add	r2, r3
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	61bb      	str	r3, [r7, #24]
        current_index++;
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d3ef      	bcc.n	8005c9c <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	88fa      	ldrh	r2, [r7, #6]
 8005cc6:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
}
 8005cda:	bf00      	nop
 8005cdc:	3724      	adds	r7, #36	@ 0x24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e018      	b.n	8005d2c <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	895b      	ldrh	r3, [r3, #10]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	899a      	ldrh	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	895b      	ldrh	r3, [r3, #10]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d203      	bcs.n	8005d2a <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	895a      	ldrh	r2, [r3, #10]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	895b      	ldrh	r3, [r3, #10]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <memset>:
 8005d6c:	4402      	add	r2, r0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d100      	bne.n	8005d76 <memset+0xa>
 8005d74:	4770      	bx	lr
 8005d76:	f803 1b01 	strb.w	r1, [r3], #1
 8005d7a:	e7f9      	b.n	8005d70 <memset+0x4>

08005d7c <__libc_init_array>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005db4 <__libc_init_array+0x38>)
 8005d80:	4c0d      	ldr	r4, [pc, #52]	@ (8005db8 <__libc_init_array+0x3c>)
 8005d82:	1b64      	subs	r4, r4, r5
 8005d84:	10a4      	asrs	r4, r4, #2
 8005d86:	2600      	movs	r6, #0
 8005d88:	42a6      	cmp	r6, r4
 8005d8a:	d109      	bne.n	8005da0 <__libc_init_array+0x24>
 8005d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005dbc <__libc_init_array+0x40>)
 8005d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005dc0 <__libc_init_array+0x44>)
 8005d90:	f000 f826 	bl	8005de0 <_init>
 8005d94:	1b64      	subs	r4, r4, r5
 8005d96:	10a4      	asrs	r4, r4, #2
 8005d98:	2600      	movs	r6, #0
 8005d9a:	42a6      	cmp	r6, r4
 8005d9c:	d105      	bne.n	8005daa <__libc_init_array+0x2e>
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da4:	4798      	blx	r3
 8005da6:	3601      	adds	r6, #1
 8005da8:	e7ee      	b.n	8005d88 <__libc_init_array+0xc>
 8005daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dae:	4798      	blx	r3
 8005db0:	3601      	adds	r6, #1
 8005db2:	e7f2      	b.n	8005d9a <__libc_init_array+0x1e>
 8005db4:	08005e2c 	.word	0x08005e2c
 8005db8:	08005e2c 	.word	0x08005e2c
 8005dbc:	08005e2c 	.word	0x08005e2c
 8005dc0:	08005e30 	.word	0x08005e30

08005dc4 <memcpy>:
 8005dc4:	440a      	add	r2, r1
 8005dc6:	4291      	cmp	r1, r2
 8005dc8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005dcc:	d100      	bne.n	8005dd0 <memcpy+0xc>
 8005dce:	4770      	bx	lr
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dda:	4291      	cmp	r1, r2
 8005ddc:	d1f9      	bne.n	8005dd2 <memcpy+0xe>
 8005dde:	bd10      	pop	{r4, pc}

08005de0 <_init>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	bf00      	nop
 8005de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de6:	bc08      	pop	{r3}
 8005de8:	469e      	mov	lr, r3
 8005dea:	4770      	bx	lr

08005dec <_fini>:
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dee:	bf00      	nop
 8005df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df2:	bc08      	pop	{r3}
 8005df4:	469e      	mov	lr, r3
 8005df6:	4770      	bx	lr
